components:
  schemas:
    AbstractApiRepository:
      properties:
        format:
          description: Component format held in this repository
          example: npm
          type: string
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        type:
          description: Controls if deployments of and updates to artifacts are allowed
          enum:
          - hosted
          - proxy
          - group
          example: hosted
          type: string
        url:
          description: URL to the repository
          type: string
      required:
      - online
      type: object
    AnonymousAccessSettingsXO:
      properties:
        enabled:
          description: Whether or not Anonymous Access is enabled
          type: boolean
        realmName:
          description: The name of the authentication realm for the anonymous account
          type: string
        userId:
          description: The username of the anonymous account
          type: string
      type: object
    ApiCertificate:
      properties:
        expiresOn:
          format: int64
          type: integer
        fingerprint:
          type: string
        id:
          type: string
        issuedOn:
          format: int64
          type: integer
        issuerCommonName:
          type: string
        issuerOrganization:
          type: string
        issuerOrganizationalUnit:
          type: string
        pem:
          type: string
        serialNumber:
          type: string
        subjectCommonName:
          type: string
        subjectOrganization:
          type: string
        subjectOrganizationalUnit:
          type: string
      type: object
    ApiCreateUser:
      properties:
        emailAddress:
          description: The email address associated with the user.
          type: string
        firstName:
          description: The first name of the user.
          type: string
        lastName:
          description: The last name of the user.
          type: string
        password:
          description: The password for the new user.
          type: string
        roles:
          description: The roles which the user has been assigned within Nexus.
          items:
            type: string
          type: array
          uniqueItems: true
        status:
          description: The user's status, e.g. active or disabled.
          enum:
          - active
          - locked
          - disabled
          - changepassword
          type: string
        userId:
          description: The userid which is required for login. This value cannot be
            changed.
          type: string
      required:
      - status
      type: object
    ApiEmailConfiguration:
      properties:
        enabled:
          type: boolean
        fromAddress:
          example: nexus@example.org
          type: string
        host:
          type: string
        nexusTrustStoreEnabled:
          description: Use the Nexus Repository Manager's certificate truststore
          type: boolean
        password:
          type: string
        port:
          format: int32
          type: integer
        sslOnConnectEnabled:
          description: Enable SSL/TLS Encryption upon Connection
          type: boolean
        sslServerIdentityCheckEnabled:
          description: Verify the server certificate when using TLS or SSL
          type: boolean
        startTlsEnabled:
          description: Enable STARTTLS Support for Insecure Connections
          type: boolean
        startTlsRequired:
          description: Require STARTTLS Support
          type: boolean
        subjectPrefix:
          description: A prefix to add to all email subjects to aid in identifying
            automated emails
          type: string
        username:
          type: string
      required:
      - port
      type: object
    ApiEmailValidation:
      properties:
        reason:
          type: string
        success:
          type: boolean
      type: object
    ApiLicenseDetailsXO:
      properties:
        contactCompany:
          type: string
        contactEmail:
          type: string
        contactName:
          type: string
        effectiveDate:
          format: date-time
          type: string
        expirationDate:
          format: date-time
          type: string
        features:
          type: string
        fingerprint:
          type: string
        licenseType:
          type: string
        licensedUsers:
          type: string
      type: object
    ApiPrivilege:
      properties:
        description:
          type: string
        name:
          description: The name of the privilege.  This value cannot be changed.
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        readOnly:
          description: Indicates whether the privilege can be changed. External values
            supplied to this will be ignored by the system.
          type: boolean
        type:
          description: The type of privilege, each type covers different portions
            of the system. External values supplied to this will be ignored by the
            system.
          type: string
      type: object
    ApiPrivilegeApplicationRequest:
      properties:
        actions:
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
            type: string
          type: array
        description:
          type: string
        domain:
          description: The domain (i.e. 'blobstores', 'capabilities' or even '*' for
            all) that this privilege is granting access to.  Note that creating new
            privileges with a domain is only necessary when using plugins that define
            their own domain(s).
          type: string
        name:
          description: The name of the privilege.  This value cannot be changed.
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
      type: object
    ApiPrivilegeRepositoryAdminRequest:
      properties:
        actions:
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
            type: string
          type: array
        description:
          type: string
        format:
          description: The repository format (i.e 'nuget', 'npm') this privilege will
            grant access to (or * for all).
          type: string
        name:
          description: The name of the privilege.  This value cannot be changed.
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        repository:
          description: The name of the repository this privilege will grant access
            to (or * for all).
          type: string
      type: object
    ApiPrivilegeRepositoryContentSelectorRequest:
      properties:
        actions:
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
            type: string
          type: array
        contentSelector:
          description: The name of a content selector that will be used to grant access
            to content via this privilege.
          type: string
        description:
          type: string
        format:
          description: The repository format (i.e 'nuget', 'npm') this privilege will
            grant access to (or * for all).
          type: string
        name:
          description: The name of the privilege.  This value cannot be changed.
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        repository:
          description: The name of the repository this privilege will grant access
            to (or * for all).
          type: string
      type: object
    ApiPrivilegeRepositoryViewRequest:
      properties:
        actions:
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
            type: string
          type: array
        description:
          type: string
        format:
          description: The repository format (i.e 'nuget', 'npm') this privilege will
            grant access to (or * for all).
          type: string
        name:
          description: The name of the privilege.  This value cannot be changed.
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        repository:
          description: The name of the repository this privilege will grant access
            to (or * for all).
          type: string
      type: object
    ApiPrivilegeScriptRequest:
      properties:
        actions:
          description: A collection of actions to associate with the privilege, using
            BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script
            privileges.
          items:
            enum:
            - READ
            - BROWSE
            - EDIT
            - ADD
            - DELETE
            - RUN
            - ASSOCIATE
            - DISASSOCIATE
            - ALL
            type: string
          type: array
        description:
          type: string
        name:
          description: The name of the privilege.  This value cannot be changed.
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        scriptName:
          description: The name of a script to give access to.
          type: string
      type: object
    ApiPrivilegeWildcardRequest:
      properties:
        description:
          type: string
        name:
          description: The name of the privilege.  This value cannot be changed.
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        pattern:
          description: A colon separated list of parts that create a permission string.
          type: string
      type: object
    ApiUser:
      properties:
        emailAddress:
          description: The email address associated with the user.
          type: string
        externalRoles:
          description: The roles which the user has been assigned in an external source,
            e.g. LDAP group. These cannot be changed within the Nexus Repository Manager.
          items:
            type: string
          type: array
          uniqueItems: true
        firstName:
          description: The first name of the user.
          type: string
        lastName:
          description: The last name of the user.
          type: string
        readOnly:
          description: Indicates whether the user's properties could be modified by
            the Nexus Repository Manager. When false only roles are considered during
            update.
          type: boolean
        roles:
          description: The roles which the user has been assigned within Nexus.
          items:
            type: string
          type: array
          uniqueItems: true
        source:
          description: The user source which is the origin of this user. This value
            cannot be changed.
          type: string
        status:
          description: The user's status, e.g. active or disabled.
          enum:
          - active
          - locked
          - disabled
          - changepassword
          type: string
        userId:
          description: The userid which is required for login. This value cannot be
            changed.
          type: string
      required:
      - status
      type: object
    ApiUserSource:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    AptHostedApiRepository:
      properties:
        apt:
          $ref: '#/components/schemas/AptHostedRepositoriesAttributes'
        aptSigning:
          $ref: '#/components/schemas/AptSigningRepositoriesAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - apt
      - aptSigning
      - online
      - storage
      type: object
    AptHostedRepositoriesAttributes:
      properties:
        distribution:
          description: Distribution to fetch
          example: bionic
          type: string
      type: object
    AptHostedRepositoryApiRequest:
      properties:
        apt:
          $ref: '#/components/schemas/AptHostedRepositoriesAttributes'
        aptSigning:
          $ref: '#/components/schemas/AptSigningRepositoriesAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - apt
      - aptSigning
      - name
      - online
      - storage
      type: object
    AptProxyApiRepository:
      properties:
        apt:
          $ref: '#/components/schemas/AptProxyRepositoriesAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRuleName:
          description: The name of the routing rule assigned to this repository
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - apt
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    AptProxyRepositoriesAttributes:
      properties:
        distribution:
          description: Distribution to fetch
          example: bionic
          type: string
        flat:
          description: Whether this repository is flat
          example: false
          type: boolean
      required:
      - flat
      type: object
    AptProxyRepositoryApiRequest:
      properties:
        apt:
          $ref: '#/components/schemas/AptProxyRepositoriesAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - apt
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    AptSigningRepositoriesAttributes:
      properties:
        keypair:
          description: PGP signing key pair (armored private key e.g. gpg --export-secret-key
            --armor)
          type: string
        passphrase:
          description: Passphrase to access PGP signing key
          type: string
      type: object
    AssetXO:
      properties:
        blobCreated:
          format: date-time
          type: string
        checksum:
          additionalProperties:
            properties: {}
            type: object
          type: object
        contentType:
          type: string
        downloadUrl:
          type: string
        fileSize:
          format: int64
          type: integer
        format:
          type: string
        id:
          type: string
        lastDownloaded:
          format: date-time
          type: string
        lastModified:
          format: date-time
          type: string
        path:
          type: string
        repository:
          type: string
        uploader:
          type: string
        uploaderIp:
          type: string
      type: object
    AzureBlobStoreApiAuthentication:
      properties:
        accountKey:
          description: The account key.
          type: string
        authenticationMethod:
          description: The type of Azure authentication to use.
          enum:
          - ACCOUNTKEY
          - MANAGEDIDENTITY
          - ENVIRONMENTVARIABLE
          type: string
      required:
      - authenticationMethod
      type: object
    AzureBlobStoreApiBucketConfiguration:
      properties:
        accountName:
          description: Account name found under Access keys for the storage account.
          type: string
        authentication:
          $ref: '#/components/schemas/AzureBlobStoreApiAuthentication'
        containerName:
          description: The name of an existing container to be used for storage.
          pattern: ^[a-z0-9][a-z0-9-]{2,62}$
          type: string
      required:
      - accountName
      - authentication
      - containerName
      type: object
    AzureBlobStoreApiModel:
      properties:
        bucketConfiguration:
          $ref: '#/components/schemas/AzureBlobStoreApiBucketConfiguration'
        name:
          description: The name of the Azure blob store.
          type: string
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
      required:
      - bucketConfiguration
      - name
      type: object
    AzureConnectionXO:
      properties:
        accountKey:
          type: string
        accountName:
          type: string
        authenticationMethod:
          type: string
        containerName:
          type: string
      type: object
    BaseTagXO:
      properties:
        attributes:
          additionalProperties:
            properties: {}
            type: object
          type: object
      type: object
    BlobStoreApiSoftQuota:
      properties:
        limit:
          description: The limit in MB.
          format: int64
          minimum: 0
          type: integer
        type:
          description: The type to use such as spaceRemainingQuota, or spaceUsedQuota
          enum:
          - spaceRemainingQuota
          - spaceUsedQuota
          type: string
      type: object
    BlobStoreQuotaResultXO:
      properties:
        blobStoreName:
          type: string
        isViolation:
          type: boolean
        message:
          type: string
      type: object
    BowerAttributes:
      properties:
        rewritePackageUrls:
          description: Whether to force Bower to retrieve packages through this proxy
            repository
          example: true
          type: boolean
      required:
      - rewritePackageUrls
      type: object
    BowerGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    BowerHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - name
      - online
      - storage
      type: object
    BowerProxyApiRepository:
      properties:
        bower:
          $ref: '#/components/schemas/BowerAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRuleName:
          description: The name of the routing rule assigned to this repository
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    BowerProxyRepositoryApiRequest:
      properties:
        bower:
          $ref: '#/components/schemas/BowerAttributes'
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    CleanupPolicyAttributes:
      properties:
        policyNames:
          description: Components that match any of the applied policies will be deleted
          items:
            type: string
          type: array
      type: object
    CocoapodsProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    ComponentAttributes:
      properties:
        proprietaryComponents:
          description: Components in this repository count as proprietary for namespace
            conflict attacks (requires Sonatype Nexus Firewall)
          type: boolean
      type: object
    ComponentXO:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/AssetXO'
          type: array
        format:
          type: string
        group:
          type: string
        id:
          type: string
        name:
          type: string
        repository:
          type: string
        version:
          type: string
      type: object
    ConanProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    CondaProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    ContentSelectorApiCreateRequest:
      properties:
        description:
          description: A human-readable description
          type: string
        expression:
          description: The expression used to identify content
          example: format == "maven2" and path =^ "/org/sonatype/nexus"
          type: string
        name:
          description: The content selector name cannot be changed after creation
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
      type: object
    ContentSelectorApiResponse:
      properties:
        description:
          description: A human-readable description
          type: string
        expression:
          description: The expression used to identify content
          example: format == "maven2" and path =^ "/org/sonatype/nexus"
          type: string
        name:
          description: The content selector name cannot be changed after creation
          type: string
        type:
          description: The type of content selector the backend is using
          enum:
          - csel
          - jexl
          type: string
      type: object
    ContentSelectorApiUpdateRequest:
      properties:
        description:
          description: An optional description of this content selector
          type: string
        expression:
          description: The expression used to identify content
          example: format == "maven2" and path =^ "/org/sonatype/nexus"
          type: string
      type: object
    CreateLdapServerXo:
      properties:
        authPassword:
          description: The password to bind with. Required if authScheme other than
            none.
          type: string
        authRealm:
          description: The SASL realm to bind to. Required if authScheme is CRAM_MD5
            or DIGEST_MD5
          example: example.com
          type: string
        authScheme:
          description: Authentication scheme used for connecting to LDAP server
          enum:
          - NONE
          - SIMPLE
          - DIGEST_MD5
          - CRAM_MD5
          type: string
        authUsername:
          description: This must be a fully qualified username if simple authentication
            is used. Required if authScheme other than none.
          type: string
        connectionRetryDelaySeconds:
          description: How long to wait before retrying
          format: int32
          minimum: 0
          type: integer
        connectionTimeoutSeconds:
          description: How long to wait before timeout
          example: 1
          format: int32
          maximum: 3600
          minimum: 1
          type: integer
        groupBaseDn:
          description: The relative DN where group objects are found (e.g. ou=Group).
            This value will have the Search base DN value appended to form the full
            Group search base DN.
          example: ou=Group
          type: string
        groupIdAttribute:
          description: This field specifies the attribute of the Object class that
            defines the Group ID. Required if groupType is static
          example: cn
          maxLength: 0
          minLength: 0
          type: string
        groupMemberAttribute:
          description: LDAP attribute containing the usernames for the group. Required
            if groupType is static
          example: memberUid
          maxLength: 0
          minLength: 0
          type: string
        groupMemberFormat:
          description: The format of user ID stored in the group member attribute.
            Required if groupType is static
          example: uid=${username},ou=people,dc=example,dc=com
          maxLength: 0
          minLength: 0
          type: string
        groupObjectClass:
          description: LDAP class for group objects. Required if groupType is static
          example: posixGroup
          maxLength: 0
          minLength: 0
          type: string
        groupSubtree:
          description: Are groups located in structures below the group base DN
          type: boolean
        groupType:
          description: 'Defines a type of groups used: static (a group contains a
            list of users) or dynamic (a user contains a list of groups). Required
            if ldapGroupsAsRoles is true.'
          enum:
          - static
          - dynamic
          type: string
        host:
          description: LDAP server connection hostname
          type: string
        ldapGroupsAsRoles:
          description: Denotes whether LDAP assigned roles are used as Nexus Repository
            Manager roles
          type: boolean
        maxIncidentsCount:
          description: How many retry attempts
          format: int32
          minimum: 0
          type: integer
        name:
          description: LDAP server name
          type: string
        port:
          description: LDAP server connection port to use
          example: 636
          format: int32
          type: integer
        protocol:
          description: LDAP server connection Protocol to use
          enum:
          - ldap
          - ldaps
          type: string
        searchBase:
          description: LDAP location to be added to the connection URL
          example: dc=example,dc=com
          type: string
        useTrustStore:
          description: Whether to use certificates stored in Nexus Repository Manager's
            truststore
          type: boolean
        userBaseDn:
          description: The relative DN where user objects are found (e.g. ou=people).
            This value will have the Search base DN value appended to form the full
            User search base DN.
          example: ou=people
          type: string
        userEmailAddressAttribute:
          description: This is used to find an email address given the user ID
          example: mail
          type: string
        userIdAttribute:
          description: This is used to find a user given its user ID
          example: uid
          type: string
        userLdapFilter:
          description: LDAP search filter to limit user search
          example: (|(mail=*@example.com)(uid=dom*))
          type: string
        userMemberOfAttribute:
          description: Set this to the attribute used to store the attribute which
            holds groups DN in the user object. Required if groupType is dynamic
          example: memberOf
          maxLength: 0
          minLength: 0
          type: string
        userObjectClass:
          description: LDAP class for user objects
          example: inetOrgPerson
          type: string
        userPasswordAttribute:
          description: If this field is blank the user will be authenticated against
            a bind with the LDAP server
          type: string
        userRealNameAttribute:
          description: This is used to find a real name given the user ID
          example: cn
          type: string
        userSubtree:
          description: Are users located in structures below the user base DN?
          type: boolean
      required:
      - authPassword
      - authScheme
      - connectionRetryDelaySeconds
      - connectionTimeoutSeconds
      - groupType
      - host
      - maxIncidentsCount
      - name
      - port
      - protocol
      - searchBase
      type: object
    CrowdApiXO:
      properties:
        applicationName:
          type: string
        applicationPassword:
          type: string
        enabled:
          type: boolean
        realmActive:
          type: boolean
        timeout:
          format: int32
          maximum: 3600
          minimum: 1
          type: integer
        url:
          type: string
        useTrustStoreForUrl:
          type: boolean
      required:
      - enabled
      - realmActive
      type: object
    DockerAttributes:
      properties:
        forceBasicAuth:
          description: Whether to force authentication (Docker Bearer Token Realm
            required if false)
          example: true
          type: boolean
        httpPort:
          description: Create an HTTP connector at specified port
          example: 8082
          format: int32
          type: integer
        httpsPort:
          description: Create an HTTPS connector at specified port
          example: 8083
          format: int32
          type: integer
        subdomain:
          description: Allows to use subdomain
          example: docker-a
          type: string
        v1Enabled:
          description: Whether to allow clients to use the V1 API to interact with
            this repository
          example: false
          type: boolean
      required:
      - forceBasicAuth
      - v1Enabled
      type: object
    DockerGroupApiRepository:
      properties:
        docker:
          $ref: '#/components/schemas/DockerAttributes'
        group:
          $ref: '#/components/schemas/GroupDeployAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - docker
      - group
      - online
      - storage
      type: object
    DockerGroupRepositoryApiRequest:
      properties:
        docker:
          $ref: '#/components/schemas/DockerAttributes'
        group:
          $ref: '#/components/schemas/GroupDeployAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - docker
      - group
      - name
      - online
      - storage
      type: object
    DockerHostedApiRepository:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        docker:
          $ref: '#/components/schemas/DockerAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - docker
      - online
      - storage
      type: object
    DockerHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        docker:
          $ref: '#/components/schemas/DockerAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/DockerHostedStorageAttributes'
      required:
      - docker
      - name
      - online
      - storage
      type: object
    DockerHostedStorageAttributes:
      properties:
        blobStoreName:
          description: Blob store used to store repository contents
          example: default
          type: string
        latestPolicy:
          description: Whether to allow redeploying the 'latest' tag but defer to
            the Deployment Policy for all other tags
          example: true
          type: boolean
        strictContentTypeValidation:
          description: Whether to validate uploaded content's MIME type appropriate
            for the repository format
          example: true
          type: boolean
        writePolicy:
          description: Controls if deployments of and updates to assets are allowed
          enum:
          - allow
          - allow_once
          - deny
          example: allow_once
          type: string
      required:
      - blobStoreName
      - strictContentTypeValidation
      - writePolicy
      type: object
    DockerProxyApiRepository:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        docker:
          $ref: '#/components/schemas/DockerAttributes'
        dockerProxy:
          $ref: '#/components/schemas/DockerProxyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRuleName:
          description: The name of the routing rule assigned to this repository
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - docker
      - dockerProxy
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    DockerProxyAttributes:
      properties:
        cacheForeignLayers:
          description: Allow Nexus Repository Manager to download and cache foreign
            layers
          type: boolean
        foreignLayerUrlWhitelist:
          description: Regular expressions used to identify URLs that are allowed
            for foreign layer requests
          items:
            type: string
          type: array
        indexType:
          description: Type of Docker Index
          enum:
          - HUB
          - REGISTRY
          - CUSTOM
          example: HUB
          type: string
        indexUrl:
          description: Url of Docker Index to use
          type: string
      type: object
    DockerProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        docker:
          $ref: '#/components/schemas/DockerAttributes'
        dockerProxy:
          $ref: '#/components/schemas/DockerProxyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - docker
      - dockerProxy
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    FileBlobStoreApiCreateRequest:
      properties:
        name:
          type: string
        path:
          description: The path to the blobstore contents. This can be an absolute
            path to anywhere on the system Nexus Repository Manager has access to
            or it can be a path relative to the sonatype-work directory.
          type: string
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
      type: object
    FileBlobStoreApiModel:
      properties:
        path:
          description: The path to the blobstore contents. This can be an absolute
            path to anywhere on the system Nexus Repository Manager has access to
            or it can be a path relative to the sonatype-work directory.
          type: string
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
      type: object
    FileBlobStoreApiUpdateRequest:
      properties:
        path:
          description: The path to the blobstore contents. This can be an absolute
            path to anywhere on the system Nexus Repository Manager has access to
            or it can be a path relative to the sonatype-work directory.
          type: string
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
      type: object
    GenericBlobStoreApiResponse:
      properties:
        availableSpaceInBytes:
          format: int64
          type: integer
        blobCount:
          format: int64
          type: integer
        name:
          type: string
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
        totalSizeInBytes:
          format: int64
          type: integer
        type:
          type: string
        unavailable:
          type: boolean
      type: object
    GitLfsHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - name
      - online
      - storage
      type: object
    GolangGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    GolangProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    GroupAttributes:
      properties:
        memberNames:
          description: Member repositories' names
          items:
            type: string
          type: array
      type: object
    GroupBlobStoreApiCreateRequest:
      properties:
        fillPolicy:
          enum:
          - roundRobin
          - writeToFirst
          type: string
        members:
          description: List of the names of blob stores that are members of this group
          items:
            type: string
          type: array
        name:
          type: string
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
      type: object
    GroupBlobStoreApiModel:
      properties:
        fillPolicy:
          enum:
          - roundRobin
          - writeToFirst
          type: string
        members:
          description: List of the names of blob stores that are members of this group
          items:
            type: string
          type: array
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
      type: object
    GroupBlobStoreApiResponse:
      properties:
        fillPolicy:
          enum:
          - roundRobin
          - writeToFirst
          type: string
        members:
          description: List of the names of blob stores that are members of this group
          items:
            type: string
          type: array
        name:
          type: string
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
      type: object
    GroupBlobStoreApiUpdateRequest:
      properties:
        fillPolicy:
          enum:
          - roundRobin
          - writeToFirst
          type: string
        members:
          description: List of the names of blob stores that are members of this group
          items:
            type: string
          type: array
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
      type: object
    GroupDeployAttributes:
      properties:
        memberNames:
          description: Member repositories' names
          items:
            type: string
          type: array
        writableMember:
          description: 'Pro-only: This field is for the Group Deployment feature available
            in NXRM Pro.'
          type: string
      type: object
    HelmHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - name
      - online
      - storage
      type: object
    HelmProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    HostedStorageAttributes:
      properties:
        blobStoreName:
          description: Blob store used to store repository contents
          example: default
          type: string
        strictContentTypeValidation:
          description: Whether to validate uploaded content's MIME type appropriate
            for the repository format
          example: true
          type: boolean
        writePolicy:
          description: Controls if deployments of and updates to assets are allowed
          enum:
          - allow
          - allow_once
          - deny
          example: allow_once
          type: string
      required:
      - blobStoreName
      - strictContentTypeValidation
      - writePolicy
      type: object
    HttpClientAttributes:
      properties:
        authentication:
          $ref: '#/components/schemas/HttpClientConnectionAuthenticationAttributes'
        autoBlock:
          description: Whether to auto-block outbound connections if remote peer is
            detected as unreachable/unresponsive
          example: true
          type: boolean
        blocked:
          description: Whether to block outbound connections on the repository
          example: false
          type: boolean
        connection:
          $ref: '#/components/schemas/HttpClientConnectionAttributes'
      required:
      - autoBlock
      - blocked
      type: object
    HttpClientAttributesWithPreemptiveAuth:
      properties:
        authentication:
          $ref: '#/components/schemas/HttpClientConnectionAuthenticationAttributesWithPreemptive'
        autoBlock:
          description: Whether to auto-block outbound connections if remote peer is
            detected as unreachable/unresponsive
          example: true
          type: boolean
        blocked:
          description: Whether to block outbound connections on the repository
          example: false
          type: boolean
        connection:
          $ref: '#/components/schemas/HttpClientConnectionAttributes'
      required:
      - autoBlock
      - blocked
      type: object
    HttpClientConnectionAttributes:
      properties:
        enableCircularRedirects:
          description: Whether to enable redirects to the same location (may be required
            by some servers)
          example: false
          type: boolean
        enableCookies:
          description: Whether to allow cookies to be stored and used
          example: false
          type: boolean
        retries:
          description: Total retries if the initial connection attempt suffers a timeout
          example: 0
          format: int32
          maximum: 10
          minimum: 0
          type: integer
        timeout:
          description: Seconds to wait for activity before stopping and retrying the
            connection
          example: 60
          format: int32
          maximum: 3600
          minimum: 1
          type: integer
        useTrustStore:
          description: Use certificates stored in the Nexus Repository Manager truststore
            to connect to external systems
          example: false
          type: boolean
        userAgentSuffix:
          description: Custom fragment to append to User-Agent header in HTTP requests
          type: string
      type: object
    HttpClientConnectionAuthenticationAttributes:
      properties:
        ntlmDomain:
          type: string
        ntlmHost:
          type: string
        password:
          type: string
        type:
          description: Authentication type
          enum:
          - username
          - ntlm
          type: string
        username:
          type: string
      type: object
    HttpClientConnectionAuthenticationAttributesWithPreemptive:
      properties:
        ntlmDomain:
          type: string
        ntlmHost:
          type: string
        password:
          type: string
        preemptive:
          description: Whether to use pre-emptive authentication. Use with caution.
            Defaults to false.
          example: false
          type: boolean
        type:
          description: Authentication type
          enum:
          - username
          - ntlm
          type: string
        username:
          type: string
      type: object
    InputStream:
      type: object
    IqConnectionVerificationXo:
      properties:
        reason:
          type: string
        success:
          type: boolean
      type: object
    IqConnectionXo:
      properties:
        authenticationType:
          description: Authentication method
          enum:
          - USER
          - PKI
          type: string
        enabled:
          description: Whether to use Sonatype Repository Firewall
          type: boolean
        failOpenModeEnabled:
          description: Allow by default when quarantine is enabled and the IQ connection
            fails
          type: boolean
        password:
          description: Credentials for the Sonatype Repository Firewall User
          type: string
        properties:
          description: Additional properties to configure for Sonatype Repository
            Firewall
          type: string
        showLink:
          description: Show Sonatype Repository Firewall link in Browse menu when
            server is enabled
          type: boolean
        timeoutSeconds:
          description: Seconds to wait for activity before stopping and retrying the
            connection. Leave blank to use the globally defined HTTP timeout.
          format: int32
          maximum: 3600
          minimum: 1
          type: integer
        url:
          description: The address of your Sonatype Repository Firewall
          type: string
        useTrustStoreForUrl:
          description: Use certificates stored in the Nexus Repository Manager truststore
            to connect to Sonatype Repository Firewall
          type: boolean
        username:
          description: User with access to Sonatype Repository Firewall
          type: string
      required:
      - authenticationType
      type: object
    MavenAttributes:
      properties:
        contentDisposition:
          description: Content Disposition
          enum:
          - INLINE
          - ATTACHMENT
          example: ATTACHMENT
          type: string
        layoutPolicy:
          description: Validate that all paths are maven artifact or metadata paths
          enum:
          - STRICT
          - PERMISSIVE
          example: STRICT
          type: string
        versionPolicy:
          description: What type of artifacts does this repository store?
          enum:
          - RELEASE
          - SNAPSHOT
          - MIXED
          example: MIXED
          type: string
      type: object
    MavenGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    MavenHostedApiRepository:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        format:
          default: maven2
          type: string
        maven:
          $ref: '#/components/schemas/MavenAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        type:
          default: hosted
          type: string
        url:
          type: string
      required:
      - maven
      - online
      - storage
      type: object
    MavenHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        maven:
          $ref: '#/components/schemas/MavenAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - maven
      - name
      - online
      - storage
      type: object
    MavenProxyApiRepository:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        maven:
          $ref: '#/components/schemas/MavenAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRuleName:
          description: The name of the routing rule assigned to this repository
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        url:
          type: string
      required:
      - httpClient
      - maven
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    MavenProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributesWithPreemptiveAuth'
        maven:
          $ref: '#/components/schemas/MavenAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - maven
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    NegativeCacheAttributes:
      properties:
        enabled:
          description: Whether to cache responses for content not present in the proxied
            repository
          example: true
          type: boolean
        timeToLive:
          description: How long to cache the fact that a file was not found in the
            repository (in minutes)
          example: 1440
          format: int32
          type: integer
      required:
      - enabled
      - timeToLive
      type: object
    NpmAttributes:
      properties:
        removeQuarantined:
          description: Remove Quarantined Versions
          example: true
          type: boolean
      required:
      - removeQuarantined
      type: object
    NpmGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupDeployAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    NpmHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - name
      - online
      - storage
      type: object
    NpmProxyApiRepository:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        npm:
          $ref: '#/components/schemas/NpmAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRuleName:
          description: The name of the routing rule assigned to this repository
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    NpmProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        npm:
          $ref: '#/components/schemas/NpmAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    NugetAttributes:
      properties:
        nugetVersion:
          description: Nuget protocol version
          enum:
          - V2
          - V3
          example: V3
          type: string
        queryCacheItemMaxAge:
          description: How long to cache query results from the proxied repository
            (in seconds)
          example: 3600
          format: int32
          type: integer
      type: object
    NugetGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    NugetHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - name
      - online
      - storage
      type: object
    NugetProxyApiRepository:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        nugetProxy:
          $ref: '#/components/schemas/NugetAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRuleName:
          description: The name of the routing rule assigned to this repository
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - negativeCache
      - nugetProxy
      - online
      - proxy
      - storage
      type: object
    NugetProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        nugetProxy:
          $ref: '#/components/schemas/NugetAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - nugetProxy
      - online
      - proxy
      - storage
      type: object
    P2ProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    Page:
      properties:
        continuationToken:
          type: string
        items:
          items:
            properties: {}
            type: object
          type: array
      type: object
    PageAssetXO:
      properties:
        continuationToken:
          type: string
        items:
          items:
            $ref: '#/components/schemas/AssetXO'
          type: array
      type: object
    PageComponentXO:
      properties:
        continuationToken:
          type: string
        items:
          items:
            $ref: '#/components/schemas/ComponentXO'
          type: array
      type: object
    PageTagXO:
      properties:
        continuationToken:
          type: string
        items:
          items:
            $ref: '#/components/schemas/TagXO'
          type: array
      type: object
    PageTaskXO:
      properties:
        continuationToken:
          type: string
        items:
          items:
            $ref: '#/components/schemas/TaskXO'
          type: array
      type: object
    ProxyAttributes:
      properties:
        contentMaxAge:
          description: How long to cache artifacts before rechecking the remote repository
            (in minutes)
          example: 1440
          format: int32
          type: integer
        metadataMaxAge:
          description: How long to cache metadata before rechecking the remote repository
            (in minutes)
          example: 1440
          format: int32
          type: integer
        remoteUrl:
          description: Location of the remote repository being proxied
          example: https://remote.repository.com
          type: string
      required:
      - contentMaxAge
      - metadataMaxAge
      type: object
    PyPiProxyAttributes:
      properties:
        removeQuarantined:
          description: Remove Quarantined Versions
          example: true
          type: boolean
      required:
      - removeQuarantined
      type: object
    PypiGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    PypiHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - name
      - online
      - storage
      type: object
    PypiProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        pypi:
          $ref: '#/components/schemas/PyPiProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    RGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    RHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - name
      - online
      - storage
      type: object
    RProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    RawAttributes:
      properties:
        contentDisposition:
          description: Content Disposition
          enum:
          - INLINE
          - ATTACHMENT
          example: ATTACHMENT
          type: string
      type: object
    RawGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        raw:
          $ref: '#/components/schemas/RawAttributes'
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    RawHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        raw:
          $ref: '#/components/schemas/RawAttributes'
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - name
      - online
      - storage
      type: object
    RawProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        raw:
          $ref: '#/components/schemas/RawAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    ReadLdapServerXo:
      properties:
        authRealm:
          description: The SASL realm to bind to. Required if authScheme is CRAM_MD5
            or DIGEST_MD5
          example: example.com
          type: string
        authScheme:
          description: Authentication scheme used for connecting to LDAP server
          enum:
          - NONE
          - SIMPLE
          - DIGEST_MD5
          - CRAM_MD5
          type: string
        authUsername:
          description: This must be a fully qualified username if simple authentication
            is used. Required if authScheme other than none.
          type: string
        connectionRetryDelaySeconds:
          description: How long to wait before retrying
          format: int32
          minimum: 0
          type: integer
        connectionTimeoutSeconds:
          description: How long to wait before timeout
          example: 1
          format: int32
          maximum: 3600
          minimum: 1
          type: integer
        groupBaseDn:
          description: The relative DN where group objects are found (e.g. ou=Group).
            This value will have the Search base DN value appended to form the full
            Group search base DN.
          example: ou=Group
          type: string
        groupIdAttribute:
          description: This field specifies the attribute of the Object class that
            defines the Group ID. Required if groupType is static
          example: cn
          maxLength: 0
          minLength: 0
          type: string
        groupMemberAttribute:
          description: LDAP attribute containing the usernames for the group. Required
            if groupType is static
          example: memberUid
          maxLength: 0
          minLength: 0
          type: string
        groupMemberFormat:
          description: The format of user ID stored in the group member attribute.
            Required if groupType is static
          example: uid=${username},ou=people,dc=example,dc=com
          maxLength: 0
          minLength: 0
          type: string
        groupObjectClass:
          description: LDAP class for group objects. Required if groupType is static
          example: posixGroup
          maxLength: 0
          minLength: 0
          type: string
        groupSubtree:
          description: Are groups located in structures below the group base DN
          type: boolean
        groupType:
          description: 'Defines a type of groups used: static (a group contains a
            list of users) or dynamic (a user contains a list of groups). Required
            if ldapGroupsAsRoles is true.'
          enum:
          - static
          - dynamic
          type: string
        host:
          description: LDAP server connection hostname
          type: string
        id:
          description: LDAP server ID
          type: string
        ldapGroupsAsRoles:
          description: Denotes whether LDAP assigned roles are used as Nexus Repository
            Manager roles
          type: boolean
        maxIncidentsCount:
          description: How many retry attempts
          format: int32
          minimum: 0
          type: integer
        name:
          description: LDAP server name
          type: string
        order:
          description: Order number in which the server is being used when looking
            for a user
          format: int32
          type: integer
        port:
          description: LDAP server connection port to use
          example: 636
          format: int32
          type: integer
        protocol:
          description: LDAP server connection Protocol to use
          enum:
          - ldap
          - ldaps
          type: string
        searchBase:
          description: LDAP location to be added to the connection URL
          example: dc=example,dc=com
          type: string
        useTrustStore:
          description: Whether to use certificates stored in Nexus Repository Manager's
            truststore
          type: boolean
        userBaseDn:
          description: The relative DN where user objects are found (e.g. ou=people).
            This value will have the Search base DN value appended to form the full
            User search base DN.
          example: ou=people
          type: string
        userEmailAddressAttribute:
          description: This is used to find an email address given the user ID
          example: mail
          type: string
        userIdAttribute:
          description: This is used to find a user given its user ID
          example: uid
          type: string
        userLdapFilter:
          description: LDAP search filter to limit user search
          example: (|(mail=*@example.com)(uid=dom*))
          type: string
        userMemberOfAttribute:
          description: Set this to the attribute used to store the attribute which
            holds groups DN in the user object. Required if groupType is dynamic
          example: memberOf
          maxLength: 0
          minLength: 0
          type: string
        userObjectClass:
          description: LDAP class for user objects
          example: inetOrgPerson
          type: string
        userPasswordAttribute:
          description: If this field is blank the user will be authenticated against
            a bind with the LDAP server
          type: string
        userRealNameAttribute:
          description: This is used to find a real name given the user ID
          example: cn
          type: string
        userSubtree:
          description: Are users located in structures below the user base DN?
          type: boolean
      required:
      - authScheme
      - connectionRetryDelaySeconds
      - connectionTimeoutSeconds
      - groupType
      - host
      - maxIncidentsCount
      - name
      - port
      - protocol
      - searchBase
      type: object
    ReadOnlyState:
      properties:
        frozen:
          type: boolean
        summaryReason:
          type: string
        systemInitiated:
          type: boolean
      type: object
    RealmApiXO:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    ReplicationAttributes:
      properties:
        assetPathRegex:
          description: Regular Expression of Asset Paths to pull pre-emptively pull
          type: string
        preemptivePullEnabled:
          description: Whether pre-emptive pull is enabled
          example: false
          type: boolean
      required:
      - preemptivePullEnabled
      type: object
    RepositoryXO:
      properties:
        attributes:
          additionalProperties:
            properties: {}
            type: object
          type: object
        format:
          type: string
        name:
          type: string
        type:
          type: string
        url:
          type: string
      type: object
    Result:
      properties:
        details:
          additionalProperties:
            properties: {}
            type: object
          type: object
        duration:
          format: int64
          type: integer
        error:
          $ref: '#/components/schemas/Throwable'
        healthy:
          type: boolean
        message:
          type: string
        time:
          format: int64
          type: integer
        timestamp:
          type: string
      type: object
    RoleXORequest:
      properties:
        description:
          description: The description of this role.
          type: string
        id:
          description: The id of the role.
          type: string
        name:
          description: The name of the role.
          type: string
        privileges:
          description: The list of privileges assigned to this role.
          items:
            type: string
          type: array
          uniqueItems: true
        roles:
          description: The list of roles assigned to this role.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    RoleXOResponse:
      properties:
        description:
          description: The description of this role.
          type: string
        id:
          description: The id of the role.
          type: string
        name:
          description: The name of the role.
          type: string
        privileges:
          description: The list of privileges assigned to this role.
          items:
            type: string
          type: array
          uniqueItems: true
        readOnly:
          description: Indicates whether the role can be changed. The system will
            ignore any supplied external values.
          type: boolean
        roles:
          description: The list of roles assigned to this role.
          items:
            type: string
          type: array
          uniqueItems: true
        source:
          description: The user source which is the origin of this role.
          type: string
      type: object
    RoutingRuleXO:
      properties:
        description:
          type: string
        matchers:
          description: Regular expressions used to identify request paths that are
            allowed or blocked (depending on mode)
          items:
            type: string
          type: array
        mode:
          description: Determines what should be done with requests when their path
            matches any of the matchers
          enum:
          - BLOCK
          - ALLOW
          type: string
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
      type: object
    RubyGemsGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    RubyGemsHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - name
      - online
      - storage
      type: object
    RubyGemsProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    S3BlobStoreApiAdvancedBucketConnection:
      properties:
        endpoint:
          description: A custom endpoint URL for third party object stores using the
            S3 API.
          type: string
        forcePathStyle:
          description: Setting this flag will result in path-style access being used
            for all requests.
          type: boolean
        maxConnectionPoolSize:
          description: Setting this value will override the default connection pool
            size of Nexus of the s3 client for this blobstore.
          format: int32
          type: integer
        signerType:
          description: An API signature version which may be required for third party
            object stores using the S3 API.
          type: string
      type: object
    S3BlobStoreApiBucket:
      properties:
        expiration:
          description: How many days until deleted blobs are finally removed from
            the S3 bucket (-1 to disable)
          example: 3
          format: int32
          type: integer
        name:
          description: The name of the S3 bucket
          type: string
        prefix:
          description: The S3 blob store (i.e S3 object) key prefix
          type: string
        region:
          description: The AWS region to create a new S3 bucket in or an existing
            S3 bucket's region
          example: DEFAULT
          type: string
      required:
      - expiration
      - name
      - region
      type: object
    S3BlobStoreApiBucketConfiguration:
      properties:
        advancedBucketConnection:
          $ref: '#/components/schemas/S3BlobStoreApiAdvancedBucketConnection'
        bucket:
          $ref: '#/components/schemas/S3BlobStoreApiBucket'
        bucketSecurity:
          $ref: '#/components/schemas/S3BlobStoreApiBucketSecurity'
        encryption:
          $ref: '#/components/schemas/S3BlobStoreApiEncryption'
      required:
      - bucket
      type: object
    S3BlobStoreApiBucketSecurity:
      properties:
        accessKeyId:
          description: An IAM access key ID for granting access to the S3 bucket
          type: string
        role:
          description: An IAM role to assume in order to access the S3 bucket
          type: string
        secretAccessKey:
          description: The secret access key associated with the specified IAM access
            key ID
          type: string
        sessionToken:
          description: An AWS STS session token associated with temporary security
            credentials which grant access to the S3 bucket
          type: string
      type: object
    S3BlobStoreApiEncryption:
      properties:
        encryptionKey:
          description: The encryption key.
          type: string
        encryptionType:
          description: The type of S3 server side encryption to use.
          enum:
          - s3ManagedEncryption
          - kmsManagedEncryption
          type: string
      type: object
    S3BlobStoreApiModel:
      properties:
        bucketConfiguration:
          $ref: '#/components/schemas/S3BlobStoreApiBucketConfiguration'
        name:
          description: The name of the S3 blob store.
          example: s3
          type: string
        softQuota:
          $ref: '#/components/schemas/BlobStoreApiSoftQuota'
        type:
          description: The blob store type.
          example: S3
          readOnly: true
          type: string
      required:
      - bucketConfiguration
      - name
      type: object
    SamlConfigurationXO:
      properties:
        emailAttribute:
          description: SAML attribute name for email
          type: string
        entityId:
          description: SAML Service Provider's unique identifying URI
          type: string
        firstNameAttribute:
          description: SAML attribute name for the first name
          type: string
        groupsAttribute:
          description: SAML attribute name for groups which maps the Identity Provider
            groups to a Nexus Repository Manager role
          type: string
        idpMetadata:
          description: SAML Identity Provider Metadata XML
          type: string
        lastNameAttribute:
          description: SAML attribute name for the last name
          type: string
        usernameAttribute:
          description: SAML attribute name for the username
          type: string
        validateAssertionSignature:
          description: Validate signatures on assertions from Identity Provider
          type: boolean
        validateResponseSignature:
          description: Validate signatures on responses from Identity Provider
          type: boolean
      required:
      - idpMetadata
      - usernameAttribute
      type: object
    ScriptResultXO:
      properties:
        name:
          type: string
        result:
          type: string
      type: object
    ScriptXO:
      properties:
        content:
          type: string
        name:
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        type:
          type: string
      type: object
    SimpleApiGroupDeployRepository:
      properties:
        group:
          $ref: '#/components/schemas/GroupDeployAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          readOnly: true
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          readOnly: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - online
      - storage
      type: object
    SimpleApiGroupRepository:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - group
      - online
      - storage
      type: object
    SimpleApiHostedRepository:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
      required:
      - online
      - storage
      type: object
    SimpleApiProxyRepository:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRuleName:
          description: The name of the routing rule assigned to this repository
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
      required:
      - httpClient
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    StackTraceElement:
      properties:
        className:
          type: string
        fileName:
          type: string
        lineNumber:
          format: int32
          type: integer
        methodName:
          type: string
        nativeMethod:
          type: boolean
      type: object
    StorageAttributes:
      properties:
        blobStoreName:
          description: Blob store used to store repository contents
          example: default
          type: string
        strictContentTypeValidation:
          description: Whether to validate uploaded content's MIME type appropriate
            for the repository format
          example: true
          type: boolean
        writePolicy:
          description: Controls if deployments of and updates to assets are allowed
          enum:
          - allow
          - allow_once
          - deny
          example: allow_once
          type: string
      required:
      - blobStoreName
      - strictContentTypeValidation
      type: object
    SupportZipGeneratorRequest:
      properties:
        auditLog:
          type: boolean
        configuration:
          type: boolean
        hostname:
          type: string
        jmx:
          type: boolean
        limitFileSizes:
          type: boolean
        limitZipSize:
          type: boolean
        log:
          type: boolean
        metrics:
          type: boolean
        replication:
          type: boolean
        security:
          type: boolean
        systemInformation:
          type: boolean
        taskLog:
          type: boolean
        threadDump:
          type: boolean
      type: object
    SupportZipXO:
      properties:
        file:
          type: string
        name:
          type: string
        size:
          type: string
        truncated:
          type: boolean
      type: object
    TagXO:
      properties:
        attributes:
          additionalProperties:
            properties: {}
            type: object
          type: object
        firstCreated:
          format: date-time
          type: string
        lastUpdated:
          format: date-time
          type: string
        name:
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
      required:
      - name
      type: object
    TaskXO:
      properties:
        currentState:
          type: string
        id:
          type: string
        lastRun:
          format: date-time
          type: string
        lastRunResult:
          type: string
        message:
          type: string
        name:
          type: string
        nextRun:
          format: date-time
          type: string
        type:
          type: string
      type: object
    Throwable:
      properties:
        cause:
          $ref: '#/components/schemas/Throwable'
        localizedMessage:
          type: string
        message:
          type: string
        stackTrace:
          items:
            $ref: '#/components/schemas/StackTraceElement'
          type: array
        suppressed:
          items:
            $ref: '#/components/schemas/Throwable'
          type: array
      type: object
    UpdateLdapServerXo:
      properties:
        authPassword:
          description: The password to bind with. Required if authScheme other than
            none.
          type: string
        authRealm:
          description: The SASL realm to bind to. Required if authScheme is CRAM_MD5
            or DIGEST_MD5
          example: example.com
          type: string
        authScheme:
          description: Authentication scheme used for connecting to LDAP server
          enum:
          - NONE
          - SIMPLE
          - DIGEST_MD5
          - CRAM_MD5
          type: string
        authUsername:
          description: This must be a fully qualified username if simple authentication
            is used. Required if authScheme other than none.
          type: string
        connectionRetryDelaySeconds:
          description: How long to wait before retrying
          format: int32
          minimum: 0
          type: integer
        connectionTimeoutSeconds:
          description: How long to wait before timeout
          example: 1
          format: int32
          maximum: 3600
          minimum: 1
          type: integer
        groupBaseDn:
          description: The relative DN where group objects are found (e.g. ou=Group).
            This value will have the Search base DN value appended to form the full
            Group search base DN.
          example: ou=Group
          type: string
        groupIdAttribute:
          description: This field specifies the attribute of the Object class that
            defines the Group ID. Required if groupType is static
          example: cn
          maxLength: 0
          minLength: 0
          type: string
        groupMemberAttribute:
          description: LDAP attribute containing the usernames for the group. Required
            if groupType is static
          example: memberUid
          maxLength: 0
          minLength: 0
          type: string
        groupMemberFormat:
          description: The format of user ID stored in the group member attribute.
            Required if groupType is static
          example: uid=${username},ou=people,dc=example,dc=com
          maxLength: 0
          minLength: 0
          type: string
        groupObjectClass:
          description: LDAP class for group objects. Required if groupType is static
          example: posixGroup
          maxLength: 0
          minLength: 0
          type: string
        groupSubtree:
          description: Are groups located in structures below the group base DN
          type: boolean
        groupType:
          description: 'Defines a type of groups used: static (a group contains a
            list of users) or dynamic (a user contains a list of groups). Required
            if ldapGroupsAsRoles is true.'
          enum:
          - static
          - dynamic
          type: string
        host:
          description: LDAP server connection hostname
          type: string
        id:
          description: LDAP server ID
          type: string
        ldapGroupsAsRoles:
          description: Denotes whether LDAP assigned roles are used as Nexus Repository
            Manager roles
          type: boolean
        maxIncidentsCount:
          description: How many retry attempts
          format: int32
          minimum: 0
          type: integer
        name:
          description: LDAP server name
          type: string
        port:
          description: LDAP server connection port to use
          example: 636
          format: int32
          type: integer
        protocol:
          description: LDAP server connection Protocol to use
          enum:
          - ldap
          - ldaps
          type: string
        searchBase:
          description: LDAP location to be added to the connection URL
          example: dc=example,dc=com
          type: string
        useTrustStore:
          description: Whether to use certificates stored in Nexus Repository Manager's
            truststore
          type: boolean
        userBaseDn:
          description: The relative DN where user objects are found (e.g. ou=people).
            This value will have the Search base DN value appended to form the full
            User search base DN.
          example: ou=people
          type: string
        userEmailAddressAttribute:
          description: This is used to find an email address given the user ID
          example: mail
          type: string
        userIdAttribute:
          description: This is used to find a user given its user ID
          example: uid
          type: string
        userLdapFilter:
          description: LDAP search filter to limit user search
          example: (|(mail=*@example.com)(uid=dom*))
          type: string
        userMemberOfAttribute:
          description: Set this to the attribute used to store the attribute which
            holds groups DN in the user object. Required if groupType is dynamic
          example: memberOf
          maxLength: 0
          minLength: 0
          type: string
        userObjectClass:
          description: LDAP class for user objects
          example: inetOrgPerson
          type: string
        userPasswordAttribute:
          description: If this field is blank the user will be authenticated against
            a bind with the LDAP server
          type: string
        userRealNameAttribute:
          description: This is used to find a real name given the user ID
          example: cn
          type: string
        userSubtree:
          description: Are users located in structures below the user base DN?
          type: boolean
      required:
      - authPassword
      - authScheme
      - connectionRetryDelaySeconds
      - connectionTimeoutSeconds
      - groupType
      - host
      - maxIncidentsCount
      - name
      - port
      - protocol
      - searchBase
      type: object
    UploadDefinitionXO:
      properties:
        assetFields:
          items:
            $ref: '#/components/schemas/UploadFieldDefinitionXO'
          type: array
        componentFields:
          items:
            $ref: '#/components/schemas/UploadFieldDefinitionXO'
          type: array
        format:
          type: string
        multipleUpload:
          type: boolean
      type: object
    UploadFieldDefinitionXO:
      properties:
        description:
          type: string
        group:
          type: string
        name:
          type: string
        optional:
          type: boolean
        type:
          type: string
      type: object
    UserTokensApiModel:
      properties:
        enabled:
          description: Whether or not User Tokens feature is enabled
          type: boolean
        protectContent:
          description: Additionally require user tokens for repository authentication
          type: boolean
      type: object
    YumAttributes:
      properties:
        deployPolicy:
          description: Validate that all paths are RPMs or yum metadata
          enum:
          - PERMISSIVE
          - STRICT
          example: STRICT
          type: string
        repodataDepth:
          description: Specifies the repository depth where repodata folder(s) are
            created
          example: 5
          format: int32
          maximum: 5
          minimum: 0
          type: integer
      required:
      - repodataDepth
      type: object
    YumGroupRepositoryApiRequest:
      properties:
        group:
          $ref: '#/components/schemas/GroupAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        yumSigning:
          $ref: '#/components/schemas/YumSigningRepositoriesAttributes'
      required:
      - group
      - name
      - online
      - storage
      type: object
    YumHostedApiRepository:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        yum:
          $ref: '#/components/schemas/YumAttributes'
      required:
      - online
      - storage
      - yum
      type: object
    YumHostedRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        component:
          $ref: '#/components/schemas/ComponentAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        storage:
          $ref: '#/components/schemas/HostedStorageAttributes'
        yum:
          $ref: '#/components/schemas/YumAttributes'
      required:
      - name
      - online
      - storage
      - yum
      type: object
    YumProxyRepositoryApiRequest:
      properties:
        cleanup:
          $ref: '#/components/schemas/CleanupPolicyAttributes'
        httpClient:
          $ref: '#/components/schemas/HttpClientAttributes'
        name:
          description: A unique identifier for this repository
          example: internal
          pattern: ^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$
          type: string
        negativeCache:
          $ref: '#/components/schemas/NegativeCacheAttributes'
        online:
          description: Whether this repository accepts incoming requests
          example: true
          type: boolean
        proxy:
          $ref: '#/components/schemas/ProxyAttributes'
        replication:
          $ref: '#/components/schemas/ReplicationAttributes'
        routingRule:
          type: string
        storage:
          $ref: '#/components/schemas/StorageAttributes'
        yumSigning:
          $ref: '#/components/schemas/YumSigningRepositoriesAttributes'
      required:
      - httpClient
      - name
      - negativeCache
      - online
      - proxy
      - storage
      type: object
    YumSigningRepositoriesAttributes:
      properties:
        keypair:
          description: PGP signing key pair (armored private key e.g. gpg --export-secret-key
            --armor)
          type: string
        passphrase:
          description: Passphrase to access PGP signing key
          type: string
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
info:
  contact:
    name: Sonatype Community Maintainers
    url: https://github.com/sonatype-nexus-community
  description: This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository)
    as of version 3.67.1-01.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Sonatype Nexus Repository Manager
  version: 3.67.1-01
openapi: 3.0.1
paths:
  /v1/assets:
    get:
      operationId: getAssets
      parameters:
      - description: A token returned by a prior request. If present, the next page
          of results are returned
        in: query
        name: continuationToken
        schema:
          type: string
      - description: Repository from which you would like to retrieve assets.
        in: query
        name: repository
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAssetXO'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to list assets
        '422':
          content: {}
          description: Parameter 'repository' is required
      summary: List assets
      tags:
      - Assets
  /v1/assets/{id}:
    delete:
      operationId: deleteAsset
      parameters:
      - description: Id of the asset to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Asset was successfully deleted
        '403':
          content: {}
          description: Insufficient permissions to delete asset
        '404':
          content: {}
          description: Asset not found
        '422':
          content: {}
          description: Malformed ID
      summary: Delete a single asset
      tags:
      - Assets
    get:
      operationId: getAssetById
      parameters:
      - description: Id of the asset to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetXO'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to get asset
        '404':
          content: {}
          description: Asset not found
        '422':
          content: {}
          description: Malformed ID
      summary: Get a single asset
      tags:
      - Assets
  /v1/azureblobstore/test-connection:
    post:
      operationId: verifyConnection_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureConnectionXO'
        required: false
      responses:
        '204':
          content: {}
          description: Azure Blob Store connection was successful
        '400':
          content: {}
          description: Azure Blob Store connection failed
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Verify connection using supplied Azure Blob Store settings
      tags:
      - Azure blob store
      x-codegen-request-body-name: body
  /v1/blobstores:
    get:
      operationId: listBlobStores
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GenericBlobStoreApiResponse'
                type: array
          description: successful operation
      summary: List the blob stores
      tags:
      - Blob store
  /v1/blobstores/azure:
    post:
      operationId: createBlobStore_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureBlobStoreApiModel'
        required: false
      responses:
        '201':
          content: {}
          description: Azure blob store created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create an Azure blob store
      tags:
      - Blob store
      x-codegen-request-body-name: body
  /v1/blobstores/azure/{name}:
    get:
      operationId: getBlobStore_1
      parameters:
      - description: Name of the blob store configuration to fetch
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AzureBlobStoreApiModel'
          description: Success
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Specified Azure blob store doesn't exist
      summary: Get an Azure blob store configuration by name
      tags:
      - Blob store
    put:
      operationId: updateBlobStore_1
      parameters:
      - description: Name of the blob store to update
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureBlobStoreApiModel'
        required: false
      responses:
        '204':
          content: {}
          description: Azure blob store updated
        '400':
          content: {}
          description: Specified Azure blob store doesn't exist
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update an Azure blob store configuration by name
      tags:
      - Blob store
      x-codegen-request-body-name: body
  /v1/blobstores/file:
    post:
      operationId: createFileBlobStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileBlobStoreApiCreateRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Success
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create a file blob store
      tags:
      - Blob store
      x-codegen-request-body-name: body
  /v1/blobstores/file/{name}:
    get:
      operationId: getFileBlobStoreConfiguration
      parameters:
      - description: The name of the file blob store to read
        example: default
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileBlobStoreApiModel'
          description: Success
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Blob store not found
      summary: Get a file blob store configuration by name
      tags:
      - Blob store
    put:
      operationId: updateFileBlobStore
      parameters:
      - description: The name of the file blob store to update
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileBlobStoreApiUpdateRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Success
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Blob store not found
      summary: Update a file blob store configuration by name
      tags:
      - Blob store
      x-codegen-request-body-name: body
  /v1/blobstores/group:
    post:
      operationId: createGroupBlobStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBlobStoreApiCreateRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Success
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create a group blob store
      tags:
      - Blob store
      x-codegen-request-body-name: body
  /v1/blobstores/group/convert/{name}/{newNameForOriginal}:
    post:
      operationId: convertBlobStoreToGroup
      parameters:
      - description: The name of the group blob store
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: A new name to the original blob store
        in: path
        name: newNameForOriginal
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupBlobStoreApiModel'
          description: Success
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Blob store not found
      summary: Convert a blob store to a group blob store
      tags:
      - Blob store
  /v1/blobstores/group/{name}:
    get:
      operationId: getGroupBlobStoreConfiguration
      parameters:
      - description: The name of the group blob store
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupBlobStoreApiModel'
          description: Success
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Blob store not found
      summary: Get a group blob store configuration by name
      tags:
      - Blob store
    put:
      operationId: updateGroupBlobStore
      parameters:
      - description: The name of the blob store to update
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBlobStoreApiUpdateRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Success
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Blob store not found
      summary: Update a group blob store configuration by name
      tags:
      - Blob store
      x-codegen-request-body-name: body
  /v1/blobstores/s3:
    post:
      operationId: createBlobStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/S3BlobStoreApiModel'
        required: false
      responses:
        '201':
          content: {}
          description: S3 blob store created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create an S3 blob store
      tags:
      - Blob store
      x-codegen-request-body-name: body
  /v1/blobstores/s3/{name}:
    get:
      operationId: getBlobStore
      parameters:
      - description: Name of the blob store configuration to fetch
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3BlobStoreApiModel'
          description: Success
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Specified S3 blob store doesn't exist
      summary: Get a S3 blob store configuration by name
      tags:
      - Blob store
    put:
      operationId: updateBlobStore
      parameters:
      - description: Name of the blob store to update
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/S3BlobStoreApiModel'
        required: false
      responses:
        '204':
          content: {}
          description: S3 blob store updated
        '400':
          content: {}
          description: Specified S3 blob store doesn't exist
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update an S3 blob store configuration by name
      tags:
      - Blob store
      x-codegen-request-body-name: body
  /v1/blobstores/{name}:
    delete:
      operationId: deleteBlobStore
      parameters:
      - description: The name of the blob store to delete
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      summary: Delete a blob store by name
      tags:
      - Blob store
  /v1/blobstores/{name}/quota-status:
    get:
      operationId: quotaStatus
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobStoreQuotaResultXO'
          description: successful operation
      summary: Get quota status for a given blob store
      tags:
      - Blob store
  /v1/components:
    get:
      operationId: getComponents
      parameters:
      - description: A token returned by a prior request. If present, the next page
          of results are returned
        in: query
        name: continuationToken
        schema:
          type: string
      - description: Repository from which you would like to retrieve components
        in: query
        name: repository
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComponentXO'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to list components
        '422':
          content: {}
          description: Parameter 'repository' is required
      summary: List components
      tags:
      - Components
    post:
      operationId: uploadComponent
      parameters:
      - description: Name of the repository to which you would like to upload the
          component
        in: query
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                apt.asset:
                  description: 'apt Asset '
                  format: binary
                  type: string
                apt.tag:
                  description: apt Tag
                  type: string
                docker.asset:
                  description: 'docker Asset '
                  format: binary
                  type: string
                docker.tag:
                  description: docker Tag
                  type: string
                helm.asset:
                  description: 'helm Asset '
                  format: binary
                  type: string
                helm.tag:
                  description: helm Tag
                  type: string
                maven2.artifactId:
                  description: maven2 Artifact ID
                  type: string
                maven2.asset1:
                  description: maven2 Asset 1
                  format: binary
                  type: string
                maven2.asset1.classifier:
                  description: maven2 Asset 1 Classifier
                  type: string
                maven2.asset1.extension:
                  description: maven2 Asset 1 Extension
                  type: string
                maven2.asset2:
                  description: maven2 Asset 2
                  format: binary
                  type: string
                maven2.asset2.classifier:
                  description: maven2 Asset 2 Classifier
                  type: string
                maven2.asset2.extension:
                  description: maven2 Asset 2 Extension
                  type: string
                maven2.asset3:
                  description: maven2 Asset 3
                  format: binary
                  type: string
                maven2.asset3.classifier:
                  description: maven2 Asset 3 Classifier
                  type: string
                maven2.asset3.extension:
                  description: maven2 Asset 3 Extension
                  type: string
                maven2.generate-pom:
                  description: maven2 Generate a POM file with these coordinates
                  type: boolean
                maven2.groupId:
                  description: maven2 Group ID
                  type: string
                maven2.packaging:
                  description: maven2 Packaging
                  type: string
                maven2.tag:
                  description: maven2 Tag
                  type: string
                maven2.version:
                  description: maven2 Version
                  type: string
                npm.asset:
                  description: 'npm Asset '
                  format: binary
                  type: string
                npm.tag:
                  description: npm Tag
                  type: string
                nuget.asset:
                  description: 'nuget Asset '
                  format: binary
                  type: string
                nuget.tag:
                  description: nuget Tag
                  type: string
                pypi.asset:
                  description: 'pypi Asset '
                  format: binary
                  type: string
                pypi.tag:
                  description: pypi Tag
                  type: string
                r.asset:
                  description: 'r Asset '
                  format: binary
                  type: string
                r.asset.pathId:
                  description: r Asset  Package Path
                  type: string
                r.tag:
                  description: r Tag
                  type: string
                raw.asset1:
                  description: raw Asset 1
                  format: binary
                  type: string
                raw.asset1.filename:
                  description: raw Asset 1 Filename
                  type: string
                raw.asset2:
                  description: raw Asset 2
                  format: binary
                  type: string
                raw.asset2.filename:
                  description: raw Asset 2 Filename
                  type: string
                raw.asset3:
                  description: raw Asset 3
                  format: binary
                  type: string
                raw.asset3.filename:
                  description: raw Asset 3 Filename
                  type: string
                raw.directory:
                  description: raw Directory
                  type: string
                raw.tag:
                  description: raw Tag
                  type: string
                rubygems.asset:
                  description: 'rubygems Asset '
                  format: binary
                  type: string
                rubygems.tag:
                  description: rubygems Tag
                  type: string
                yum.asset:
                  description: 'yum Asset '
                  format: binary
                  type: string
                yum.asset.filename:
                  description: yum Asset  Filename
                  type: string
                yum.directory:
                  description: yum Directory
                  type: string
                yum.tag:
                  description: yum Tag
                  type: string
              type: object
      responses:
        '403':
          content: {}
          description: Insufficient permissions to upload a component
        '422':
          content: {}
          description: Parameter 'repository' is required
      summary: Upload a single component
      tags:
      - Components
  /v1/components/{id}:
    delete:
      operationId: deleteComponent
      parameters:
      - description: ID of the component to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Component was successfully deleted
        '403':
          content: {}
          description: Insufficient permissions to delete component
        '404':
          content: {}
          description: Component not found
        '422':
          content: {}
          description: Malformed ID
      summary: Delete a single component
      tags:
      - Components
    get:
      operationId: getComponentById
      parameters:
      - description: ID of the component to retrieve
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentXO'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to get component
        '404':
          content: {}
          description: Component not found
        '422':
          content: {}
          description: Malformed ID
      summary: Get a single component
      tags:
      - Components
  /v1/email:
    delete:
      operationId: deleteEmailConfiguration
      responses:
        '204':
          content: {}
          description: Email configuration was successfully cleared
      summary: Disable and clear the email configuration
      tags:
      - Email
    get:
      operationId: getEmailConfiguration
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEmailConfiguration'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to retrieve the email configuration
      summary: Retrieve the current email configuration
      tags:
      - Email
    put:
      operationId: setEmailConfiguration
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ApiEmailConfiguration'
        required: true
      responses:
        '204':
          content: {}
          description: Email configuration was successfully updated
        '400':
          content: {}
          description: Invalid request
        '403':
          content: {}
          description: Insufficient permissions to update the email configuration
      summary: Set the current email configuration
      tags:
      - Email
      x-codegen-request-body-name: body
  /v1/email/verify:
    post:
      operationId: testEmailConfiguration
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        description: An email address to send a test email to
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEmailValidation'
          description: Validation was complete, look at the body to determine success
        '403':
          content: {}
          description: Insufficient permissions to verify the email configuration
      summary: Send a test email to the email address provided in the request body
      tags:
      - Email
      x-codegen-request-body-name: body
  /v1/formats/upload-specs:
    get:
      operationId: get_2
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UploadDefinitionXO'
                type: array
          description: successful operation
      summary: Get upload field requirements for each supported format
      tags:
      - Formats
  /v1/formats/{format}/upload-specs:
    get:
      operationId: get_1
      parameters:
      - description: The desired repository format
        in: path
        name: format
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDefinitionXO'
          description: successful operation
      summary: Get upload field requirements for the desired format
      tags:
      - Formats
  /v1/iq:
    get:
      operationId: getConfiguration
      responses:
        '200':
          content: {}
          description: Sonatype Repository Firewall configuration returned
      summary: Get Sonatype Repository Firewall configuration
      tags:
      - Manage Sonatype Repository Firewall configuration
    put:
      operationId: updateConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IqConnectionXo'
        required: false
      responses:
        '204':
          content: {}
          description: Sonatype Repository Firewall configuration has been updated
      summary: Update Sonatype Repository Firewall configuration
      tags:
      - Manage Sonatype Repository Firewall configuration
      x-codegen-request-body-name: body
  /v1/iq/disable:
    post:
      operationId: disableIq
      responses:
        '204':
          content: {}
          description: Sonatype Repository Firewall has been disabled
        '400':
          content: {}
          description: Sonatype Repository Firewall connection not configured
      summary: Disable Sonatype Repository Firewall
      tags:
      - Manage Sonatype Repository Firewall configuration
  /v1/iq/enable:
    post:
      operationId: enableIq
      responses:
        '204':
          content: {}
          description: Sonatype Repository Firewall has been enabled
        '400':
          content: {}
          description: Sonatype Repository Firewall connection not configured
      summary: Enable Sonatype Repository Firewall
      tags:
      - Manage Sonatype Repository Firewall configuration
  /v1/iq/verify-connection:
    post:
      operationId: verifyConnection
      responses:
        '200':
          content: {}
          description: Connection verification complete, check response body for result
      summary: Verify Sonatype Repository Firewall connection
      tags:
      - Manage Sonatype Repository Firewall configuration
  /v1/lifecycle/bounce:
    put:
      description: Re-runs all phases from the given phase to the current phase
      operationId: bounce
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: The phase to bounce
        required: false
      responses:
        default:
          content: {}
          description: successful operation
      summary: Bounce lifecycle phase
      tags:
      - Lifecycle
      x-codegen-request-body-name: body
  /v1/lifecycle/phase:
    get:
      operationId: getPhase
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: successful operation
      summary: Get current lifecycle phase
      tags:
      - Lifecycle
    put:
      operationId: setPhase
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: The phase to move to
        required: false
      responses:
        default:
          content: {}
          description: successful operation
      summary: Move to new lifecycle phase
      tags:
      - Lifecycle
      x-codegen-request-body-name: body
  /v1/read-only:
    get:
      operationId: get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOnlyState'
          description: successful operation
      summary: Get read-only state
      tags:
      - Read-only
  /v1/read-only/force-release:
    post:
      description: 'Forcibly release read-only status, including if caused by system
        tasks. Warning: may result in data loss.'
      operationId: forceRelease
      responses:
        '204':
          content: {}
          description: Database is no longer read-only
        '403':
          content: {}
          description: Authentication required
        '404':
          content: {}
          description: No change to read-only state
      summary: Forcibly release read-only and allow changes to embedded OrientDB
      tags:
      - Read-only
  /v1/read-only/freeze:
    post:
      description: For low-level system maintenance purposes only; do not use if you
        want users to still be able to download components.
      operationId: freeze
      responses:
        '204':
          content: {}
          description: Database is now read-only
        '403':
          content: {}
          description: Authentication required
        '404':
          content: {}
          description: No change to read-only state
      summary: Prevent changes to embedded OrientDB
      tags:
      - Read-only
  /v1/read-only/release:
    post:
      description: Releases administrator-initiated read-only status. Will not release
        read-only status caused by system tasks.
      operationId: release
      responses:
        '204':
          content: {}
          description: Database is no longer read-only
        '403':
          content: {}
          description: Authentication required
        '404':
          content: {}
          description: No change to read-only state
      summary: Release read-only and allow changes to embedded OrientDB
      tags:
      - Read-only
  /v1/repositories:
    get:
      operationId: getAllRepositories
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepositoryXO'
                type: array
          description: successful operation
      summary: List repositories
      tags:
      - Repository Management
  /v1/repositories/apt/hosted:
    post:
      operationId: createAptHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AptHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create APT hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/apt/hosted/{repositoryName}:
    get:
      operationId: getAptHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AptHostedApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateAptHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AptHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Update APT hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/apt/proxy:
    post:
      operationId: createAptProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AptProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create APT proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/apt/proxy/{repositoryName}:
    get:
      operationId: getAptProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AptProxyApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateAptProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AptProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Update APT proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/bower/group:
    post:
      operationId: createBowerGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Bower group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/bower/group/{repositoryName}:
    get:
      operationId: getBowerGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateBowerGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Bower group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/bower/hosted:
    post:
      operationId: createBowerHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Bower hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/bower/hosted/{repositoryName}:
    get:
      operationId: getBowerHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateBowerHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Bower hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/bower/proxy:
    post:
      operationId: createBowerProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Bower proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/bower/proxy/{repositoryName}:
    get:
      operationId: getBowerProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BowerProxyApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateBowerProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BowerProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Bower proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/cocoapods/proxy:
    post:
      operationId: createCocoapodsProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocoapodsProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create Cocoapods proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/cocoapods/proxy/{repositoryName}:
    get:
      operationId: getCocoapodsProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateCocoapodsProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocoapodsProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Cocoapods proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/conan/proxy:
    post:
      operationId: createConanProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConanProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create Conan proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/conan/proxy/{repositoryName}:
    get:
      operationId: getConanProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateConanProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConanProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Update Conan proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/conda/proxy:
    post:
      operationId: createCondaProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondaProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create conda proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/conda/proxy/{repositoryName}:
    get:
      operationId: getCondaProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateCondaProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondaProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update conda proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/docker/group:
    post:
      operationId: createDockerGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Docker group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/docker/group/{repositoryName}:
    get:
      operationId: getDockerGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerGroupApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateDockerGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Update Docker group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/docker/hosted:
    post:
      operationId: createDockerHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Repository not found
      summary: Create Docker hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/docker/hosted/{repositoryName}:
    get:
      operationId: getDockerHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerHostedApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateDockerHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Update Docker hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/docker/proxy:
    post:
      operationId: createDockerProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Docker proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/docker/proxy/{repositoryName}:
    get:
      operationId: getDockerProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerProxyApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateDockerProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Update Docker proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/gitlfs/hosted:
    post:
      operationId: createGitlfsHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitLfsHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Git LFS hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/gitlfs/hosted/{repositoryName}:
    get:
      operationId: getGitlfsHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateGitlfsHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitLfsHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Git LFS hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/go/group:
    post:
      operationId: createGoGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolangGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create a Go group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/go/group/{repositoryName}:
    get:
      operationId: getGoGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateGoGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolangGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Update a Go group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/go/proxy:
    post:
      operationId: createGoProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolangProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create a Go proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/go/proxy/{repositoryName}:
    get:
      operationId: getGoProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateGoProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolangProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Update a Go proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/helm/hosted:
    post:
      operationId: createHelmHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create Helm hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/helm/hosted/{repositoryName}:
    get:
      operationId: getHelmHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateHelmHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Helm hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/helm/proxy:
    post:
      operationId: createHelmProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create Helm proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/helm/proxy/{repositoryName}:
    get:
      operationId: getHelmProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateHelmProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Helm proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/maven/group:
    post:
      operationId: createMavenGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Maven group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/maven/group/{repositoryName}:
    get:
      operationId: getMavenGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateMavenGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Maven group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/maven/hosted:
    post:
      operationId: createMavenHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Maven hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/maven/hosted/{repositoryName}:
    get:
      operationId: getMavenHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MavenHostedApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateMavenHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Maven hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/maven/proxy:
    post:
      operationId: createMavenProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Maven proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/maven/proxy/{repositoryName}:
    get:
      operationId: getMavenProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MavenProxyApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateMavenProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MavenProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Maven proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/npm/group:
    post:
      operationId: createNpmGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create npm group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/npm/group/{repositoryName}:
    get:
      operationId: getNpmGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupDeployRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateNpmGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update npm group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/npm/hosted:
    post:
      operationId: createNpmHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create npm hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/npm/hosted/{repositoryName}:
    get:
      operationId: getNpmHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateNpmHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update npm hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/npm/proxy:
    post:
      operationId: createNpmProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create npm proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/npm/proxy/{repositoryName}:
    get:
      operationId: getNpmProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NpmProxyApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateNpmProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NpmProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update npm proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/nuget/group:
    post:
      operationId: createNugetGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create NuGet group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/nuget/group/{repositoryName}:
    get:
      operationId: getNugetGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateNugetGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update NuGet group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/nuget/hosted:
    post:
      operationId: createNugetHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create NuGet hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/nuget/hosted/{repositoryName}:
    get:
      operationId: getNugetHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateNugetHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update NuGet hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/nuget/proxy:
    post:
      operationId: createNugetProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create NuGet proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/nuget/proxy/{repositoryName}:
    get:
      operationId: getNugetProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NugetProxyApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateNugetProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NugetProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update NuGet proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/p2/proxy:
    post:
      operationId: createP2ProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/P2ProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create p2 proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/p2/proxy/{repositoryName}:
    get:
      operationId: getP2ProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateP2ProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/P2ProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update p2 proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/pypi/group:
    post:
      operationId: createPypiGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create PyPI group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/pypi/group/{repositoryName}:
    get:
      operationId: getPypiGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updatePypiGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update PyPI group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/pypi/hosted:
    post:
      operationId: createPypiHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create PyPI hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/pypi/hosted/{repositoryName}:
    get:
      operationId: getPypiHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updatePypiHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update PyPI hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/pypi/proxy:
    post:
      operationId: createPypiProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create PyPI proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/pypi/proxy/{repositoryName}:
    get:
      operationId: getPypiProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updatePypiProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PypiProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update PyPI proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/r/group:
    post:
      operationId: createRGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create R group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/r/group/{repositoryName}:
    get:
      operationId: getRGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateRGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update R group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/r/hosted:
    post:
      operationId: createRHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create R hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/r/hosted/{repositoryName}:
    get:
      operationId: getRHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateRHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update R hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/r/proxy:
    post:
      operationId: createRProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '405':
          content: {}
          description: Feature is disabled in High Availability
      summary: Create R proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/r/proxy/{repositoryName}:
    get:
      operationId: getRProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateRProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Update R proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/raw/group:
    post:
      operationId: createRawGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create raw group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/raw/group/{repositoryName}:
    get:
      operationId: getRawGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateRawGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update raw group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/raw/hosted:
    post:
      operationId: createRawHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create raw hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/raw/hosted/{repositoryName}:
    get:
      operationId: getRawHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateRawHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update raw hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/raw/proxy:
    post:
      operationId: createRawProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create raw proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/raw/proxy/{repositoryName}:
    get:
      operationId: getRawProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateRawProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update raw proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/group:
    post:
      operationId: createRubygemsGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create RubyGems group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/group/{repositoryName}:
    get:
      operationId: getRubygemsGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateRubygemsGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update RubyGems group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/hosted:
    post:
      operationId: createRubygemsHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create RubyGems hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/hosted/{repositoryName}:
    get:
      operationId: getRubygemsHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiHostedRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateRubygemsHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update RubyGems hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/proxy:
    post:
      operationId: createRubygemsProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create RubyGems proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/rubygems/proxy/{repositoryName}:
    get:
      operationId: getRubygemsProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateRubygemsProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RubyGemsProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update RubyGems proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/yum/group:
    post:
      operationId: createYumGroupRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumGroupRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Yum group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/yum/group/{repositoryName}:
    get:
      operationId: getYumGroupRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiGroupRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateYumGroupRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumGroupRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Yum group repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/yum/hosted:
    post:
      operationId: createYumHostedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumHostedRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Yum hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/yum/hosted/{repositoryName}:
    get:
      operationId: getYumHostedRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YumHostedApiRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateYumHostedRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumHostedRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Yum hosted repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/yum/proxy:
    post:
      operationId: createYumProxyRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumProxyRepositoryApiRequest'
        required: false
      responses:
        '201':
          content: {}
          description: Repository created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create Yum proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/yum/proxy/{repositoryName}:
    get:
      operationId: getYumProxyRepository
      parameters:
      - in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleApiProxyRepository'
          description: successful operation
      summary: Get repository
      tags:
      - Repository Management
    put:
      operationId: updateYumProxyRepository
      parameters:
      - description: Name of the repository to update
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YumProxyRepositoryApiRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Repository updated
        '400':
          content: {}
          description: Bad request
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Yum proxy repository
      tags:
      - Repository Management
      x-codegen-request-body-name: body
  /v1/repositories/{repositoryName}:
    delete:
      operationId: deleteRepository
      parameters:
      - description: Name of the repository to delete
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Repository deleted
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Delete repository of any format
      tags:
      - Repository Management
    get:
      operationId: getRepository
      parameters:
      - description: Name of the repository to get
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryXO'
          description: successful operation
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Get repository details
      tags:
      - Repository Management
  /v1/repositories/{repositoryName}/health-check:
    delete:
      operationId: disableRepositoryHealthCheck
      parameters:
      - description: Name of the repository to disable Repository Health Check for
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Repository Health Check disabled
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Disable repository health check. Proxy repositories only.
      tags:
      - Repository Management
    post:
      operationId: create{repositoryname}Health-checkRepository
      parameters:
      - description: Name of the repository to enable Repository Health Check for
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Repository Health Check enabled
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
        '409':
          content: {}
          description: EULA not accepted or Repository Health Check capability not
            active
      summary: Enable repository health check. Proxy repositories only.
      tags:
      - Repository Management
  /v1/repositories/{repositoryName}/invalidate-cache:
    post:
      operationId: create{repositoryname}Invalidate-cacheRepository
      parameters:
      - description: Name of the repository to invalidate cache
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Repository cache invalidated
        '400':
          content: {}
          description: Repository is not of proxy or group type
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Invalidate repository cache. Proxy or group repositories only.
      tags:
      - Repository Management
  /v1/repositories/{repositoryName}/rebuild-index:
    post:
      operationId: create{repositoryname}Rebuild-indexRepository
      parameters:
      - description: Name of the repository to rebuild index
        in: path
        name: repositoryName
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Repository search index rebuild has been scheduled
        '400':
          content: {}
          description: Repository is not of hosted or proxy type
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Repository not found
      summary: Schedule a 'Repair - Rebuild repository search' Task. Hosted or proxy
        repositories only.
      tags:
      - Repository Management
  /v1/repositorySettings:
    get:
      operationId: getRepositories
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AbstractApiRepository'
                type: array
          description: Repositories list returned
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: List repositories
      tags:
      - Repository Management
  /v1/routing-rules:
    get:
      operationId: getRoutingRules
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoutingRuleXO'
                type: array
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to read routing rules
      summary: List routing rules
      tags:
      - Routing rules
    post:
      operationId: createRoutingRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingRuleXO'
        description: A routing rule configuration
        required: true
      responses:
        '204':
          content: {}
          description: Routing rule was successfully created
        '400':
          content: {}
          description: A routing rule with the same name already exists or required
            parameters missing
        '403':
          content: {}
          description: Insufficient permissions to create routing rule
      summary: Create a single routing rule
      tags:
      - Routing rules
      x-codegen-request-body-name: body
  /v1/routing-rules/{name}:
    delete:
      operationId: deleteRoutingRule
      parameters:
      - description: The name of the routing rule to delete
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Routing rule was successfully deleted
        '403':
          content: {}
          description: Insufficient permissions to delete routing rules
        '404':
          content: {}
          description: Routing rule not found
      summary: Delete a single routing rule
      tags:
      - Routing rules
    get:
      operationId: getRoutingRule
      parameters:
      - description: The name of the routing rule to get
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingRuleXO'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to read routing rules
        '404':
          content: {}
          description: Routing rule not found
      summary: Get a single routing rule
      tags:
      - Routing rules
    put:
      operationId: updateRoutingRule
      parameters:
      - description: The name of the routing rule to update
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingRuleXO'
        description: A routing rule configuration
        required: true
      responses:
        '204':
          content: {}
          description: Routing rule was successfully updated
        '400':
          content: {}
          description: Another routing rule with the same name already exists or required
            parameters missing
        '403':
          content: {}
          description: Insufficient permissions to edit routing rules
        '404':
          content: {}
          description: Routing rule not found
      summary: Update a single routing rule
      tags:
      - Routing rules
      x-codegen-request-body-name: body
  /v1/script:
    get:
      operationId: browse
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScriptXO'
                type: array
          description: successful operation
      summary: List all stored scripts
      tags:
      - Script
    post:
      operationId: add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptXO'
        required: false
      responses:
        '204':
          content: {}
          description: Script was added
        '410':
          content: {}
          description: Script creation is disabled
      summary: Add a new script
      tags:
      - Script
      x-codegen-request-body-name: body
  /v1/script/{name}:
    delete:
      operationId: delete_1
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Script was deleted
        '404':
          content: {}
          description: No script with the specified name
      summary: Delete stored script by name
      tags:
      - Script
    get:
      operationId: read_1
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptXO'
          description: successful operation
        '404':
          content: {}
          description: No script with the specified name
      summary: Read stored script by name
      tags:
      - Script
    put:
      operationId: edit
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptXO'
        required: false
      responses:
        '204':
          content: {}
          description: Script was updated
        '404':
          content: {}
          description: No script with the specified name
        '410':
          content: {}
          description: Script updating is disabled
      summary: Update stored script by name
      tags:
      - Script
      x-codegen-request-body-name: body
  /v1/script/{name}/run:
    post:
      operationId: run_1
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptResultXO'
          description: successful operation
        '404':
          content: {}
          description: No script with the specified name
        '500':
          content: {}
          description: Script execution failed with exception
      summary: Run stored script by name
      tags:
      - Script
      x-codegen-request-body-name: body
  /v1/search:
    get:
      operationId: search
      parameters:
      - allowEmptyValue: true
        description: A token returned by a prior request. If present, the next page
          of results are returned
        in: query
        name: continuationToken
        schema:
          type: string
      - allowEmptyValue: true
        description: The field to sort the results against, if left empty, a sort
          based on match weight will be used.
        in: query
        name: sort
        schema:
          enum:
          - group
          - name
          - version
          - repository
          type: string
      - allowEmptyValue: true
        description: The direction to sort records in, defaults to ascending ('asc')
          for all sort fields, except version, which defaults to descending ('desc')
        in: query
        name: direction
        schema:
          enum:
          - asc
          - desc
          type: string
      - allowEmptyValue: true
        description: How long to wait for search results in seconds. If this value
          is not provided, the system default timeout will be used.
        in: query
        name: timeout
        schema:
          format: int32
          type: integer
      - description: Query by keyword
        in: query
        name: q
        schema:
          type: string
      - description: Repository name
        in: query
        name: repository
        schema:
          type: string
      - description: Query by format
        in: query
        name: format
        schema:
          type: string
      - description: Component group
        in: query
        name: group
        schema:
          type: string
      - description: Component name
        in: query
        name: name
        schema:
          type: string
      - description: Component version
        in: query
        name: version
        schema:
          type: string
      - description: Prerelease version flag
        in: query
        name: prerelease
        schema:
          type: string
      - description: Specific MD5 hash of component's asset
        in: query
        name: md5
        schema:
          type: string
      - description: Specific SHA-1 hash of component's asset
        in: query
        name: sha1
        schema:
          type: string
      - description: Specific SHA-256 hash of component's asset
        in: query
        name: sha256
        schema:
          type: string
      - description: Specific SHA-512 hash of component's asset
        in: query
        name: sha512
        schema:
          type: string
      - description: Conan base version
        in: query
        name: conan.baseVersion
        schema:
          type: string
      - description: Conan channel
        in: query
        name: conan.channel
        schema:
          type: string
      - description: Conan recipe revision
        in: query
        name: conan.revision
        schema:
          type: string
      - description: Conan package id
        in: query
        name: conan.packageId
        schema:
          type: string
      - description: Conan package revision
        in: query
        name: conan.packageRevision
        schema:
          type: string
      - description: Docker image name
        in: query
        name: docker.imageName
        schema:
          type: string
      - description: Docker image tag
        in: query
        name: docker.imageTag
        schema:
          type: string
      - description: Docker layer ID
        in: query
        name: docker.layerId
        schema:
          type: string
      - description: Docker content digest
        in: query
        name: docker.contentDigest
        schema:
          type: string
      - description: Maven groupId
        in: query
        name: maven.groupId
        schema:
          type: string
      - description: Maven artifactId
        in: query
        name: maven.artifactId
        schema:
          type: string
      - description: Maven base version
        in: query
        name: maven.baseVersion
        schema:
          type: string
      - description: Maven extension of component's asset
        in: query
        name: maven.extension
        schema:
          type: string
      - description: Maven classifier of component's asset
        in: query
        name: maven.classifier
        schema:
          type: string
      - description: Group asset version extension classifier
        in: query
        name: gavec
        schema:
          type: string
      - description: npm scope
        in: query
        name: npm.scope
        schema:
          type: string
      - description: npm author
        in: query
        name: npm.author
        schema:
          type: string
      - description: npm description
        in: query
        name: npm.description
        schema:
          type: string
      - description: npm keywords
        in: query
        name: npm.keywords
        schema:
          type: string
      - description: npm license
        in: query
        name: npm.license
        schema:
          type: string
      - description: npm tagged is
        in: query
        name: npm.tagged_is
        schema:
          type: string
      - description: npm tagged not
        in: query
        name: npm.tagged_not
        schema:
          type: string
      - description: NuGet id
        in: query
        name: nuget.id
        schema:
          type: string
      - description: NuGet tags
        in: query
        name: nuget.tags
        schema:
          type: string
      - description: NuGet title
        in: query
        name: nuget.title
        schema:
          type: string
      - description: NuGet authors
        in: query
        name: nuget.authors
        schema:
          type: string
      - description: NuGet description
        in: query
        name: nuget.description
        schema:
          type: string
      - description: NuGet summary
        in: query
        name: nuget.summary
        schema:
          type: string
      - description: p2 plugin name
        in: query
        name: p2.pluginName
        schema:
          type: string
      - description: PyPI classifiers
        in: query
        name: pypi.classifiers
        schema:
          type: string
      - description: PyPI description
        in: query
        name: pypi.description
        schema:
          type: string
      - description: PyPI keywords
        in: query
        name: pypi.keywords
        schema:
          type: string
      - description: PyPI summary
        in: query
        name: pypi.summary
        schema:
          type: string
      - description: RubyGems description
        in: query
        name: rubygems.description
        schema:
          type: string
      - description: RubyGems platform
        in: query
        name: rubygems.platform
        schema:
          type: string
      - description: RubyGems summary
        in: query
        name: rubygems.summary
        schema:
          type: string
      - description: Component tag
        in: query
        name: tag
        schema:
          type: string
      - description: Yum architecture
        in: query
        name: yum.architecture
        schema:
          type: string
      - description: Yum package name
        in: query
        name: yum.name
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComponentXO'
          description: successful operation
      summary: Search components
      tags:
      - Search
  /v1/search/assets:
    get:
      operationId: searchAssets
      parameters:
      - description: A token returned by a prior request. If present, the next page
          of results are returned
        in: query
        name: continuationToken
        schema:
          type: string
      - allowEmptyValue: true
        description: The field to sort the results against, if left empty, a sort
          based on match weight will be used.
        in: query
        name: sort
        schema:
          enum:
          - group
          - name
          - version
          - repository
          type: string
      - allowEmptyValue: true
        description: The direction to sort records in, defaults to ascending ('asc')
          for all sort fields, except version, which defaults to descending ('desc')
        in: query
        name: direction
        schema:
          enum:
          - asc
          - desc
          type: string
      - allowEmptyValue: true
        description: How long to wait for search results in seconds. If this value
          is not provided, the system default timeout will be used.
        in: query
        name: timeout
        schema:
          format: int32
          type: integer
      - description: Query by keyword
        in: query
        name: q
        schema:
          type: string
      - description: Repository name
        in: query
        name: repository
        schema:
          type: string
      - description: Query by format
        in: query
        name: format
        schema:
          type: string
      - description: Component group
        in: query
        name: group
        schema:
          type: string
      - description: Component name
        in: query
        name: name
        schema:
          type: string
      - description: Component version
        in: query
        name: version
        schema:
          type: string
      - description: Prerelease version flag
        in: query
        name: prerelease
        schema:
          type: string
      - description: Specific MD5 hash of component's asset
        in: query
        name: md5
        schema:
          type: string
      - description: Specific SHA-1 hash of component's asset
        in: query
        name: sha1
        schema:
          type: string
      - description: Specific SHA-256 hash of component's asset
        in: query
        name: sha256
        schema:
          type: string
      - description: Specific SHA-512 hash of component's asset
        in: query
        name: sha512
        schema:
          type: string
      - description: Conan base version
        in: query
        name: conan.baseVersion
        schema:
          type: string
      - description: Conan channel
        in: query
        name: conan.channel
        schema:
          type: string
      - description: Conan recipe revision
        in: query
        name: conan.revision
        schema:
          type: string
      - description: Conan package id
        in: query
        name: conan.packageId
        schema:
          type: string
      - description: Conan package revision
        in: query
        name: conan.packageRevision
        schema:
          type: string
      - description: Docker image name
        in: query
        name: docker.imageName
        schema:
          type: string
      - description: Docker image tag
        in: query
        name: docker.imageTag
        schema:
          type: string
      - description: Docker layer ID
        in: query
        name: docker.layerId
        schema:
          type: string
      - description: Docker content digest
        in: query
        name: docker.contentDigest
        schema:
          type: string
      - description: Maven groupId
        in: query
        name: maven.groupId
        schema:
          type: string
      - description: Maven artifactId
        in: query
        name: maven.artifactId
        schema:
          type: string
      - description: Maven base version
        in: query
        name: maven.baseVersion
        schema:
          type: string
      - description: Maven extension of component's asset
        in: query
        name: maven.extension
        schema:
          type: string
      - description: Maven classifier of component's asset
        in: query
        name: maven.classifier
        schema:
          type: string
      - description: Group asset version extension classifier
        in: query
        name: gavec
        schema:
          type: string
      - description: npm scope
        in: query
        name: npm.scope
        schema:
          type: string
      - description: npm author
        in: query
        name: npm.author
        schema:
          type: string
      - description: npm description
        in: query
        name: npm.description
        schema:
          type: string
      - description: npm keywords
        in: query
        name: npm.keywords
        schema:
          type: string
      - description: npm license
        in: query
        name: npm.license
        schema:
          type: string
      - description: npm tagged is
        in: query
        name: npm.tagged_is
        schema:
          type: string
      - description: npm tagged not
        in: query
        name: npm.tagged_not
        schema:
          type: string
      - description: NuGet id
        in: query
        name: nuget.id
        schema:
          type: string
      - description: NuGet tags
        in: query
        name: nuget.tags
        schema:
          type: string
      - description: NuGet title
        in: query
        name: nuget.title
        schema:
          type: string
      - description: NuGet authors
        in: query
        name: nuget.authors
        schema:
          type: string
      - description: NuGet description
        in: query
        name: nuget.description
        schema:
          type: string
      - description: NuGet summary
        in: query
        name: nuget.summary
        schema:
          type: string
      - description: p2 plugin name
        in: query
        name: p2.pluginName
        schema:
          type: string
      - description: PyPI classifiers
        in: query
        name: pypi.classifiers
        schema:
          type: string
      - description: PyPI description
        in: query
        name: pypi.description
        schema:
          type: string
      - description: PyPI keywords
        in: query
        name: pypi.keywords
        schema:
          type: string
      - description: PyPI summary
        in: query
        name: pypi.summary
        schema:
          type: string
      - description: RubyGems description
        in: query
        name: rubygems.description
        schema:
          type: string
      - description: RubyGems platform
        in: query
        name: rubygems.platform
        schema:
          type: string
      - description: RubyGems summary
        in: query
        name: rubygems.summary
        schema:
          type: string
      - description: Component tag
        in: query
        name: tag
        schema:
          type: string
      - description: Yum architecture
        in: query
        name: yum.architecture
        schema:
          type: string
      - description: Yum package name
        in: query
        name: yum.name
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAssetXO'
          description: successful operation
      summary: Search assets
      tags:
      - Search
  /v1/search/assets/download:
    get:
      description: Returns a 302 Found with location header field set to download
        URL. Unless a sort parameter is supplied, the search must return a single
        asset to receive download URL.
      operationId: searchAndDownloadAssets
      parameters:
      - allowEmptyValue: true
        description: The field to sort the results against, if left empty and more
          than 1 result is returned, the request will fail.
        in: query
        name: sort
        schema:
          enum:
          - group
          - name
          - version
          - repository
          type: string
      - allowEmptyValue: true
        description: The direction to sort records in, defaults to ascending ('asc')
          for all sort fields, except version, which defaults to descending ('desc')
        in: query
        name: direction
        schema:
          enum:
          - asc
          - desc
          type: string
      - allowEmptyValue: true
        description: How long to wait for search results in seconds. If this value
          is not provided, the system default timeout will be used.
        in: query
        name: timeout
        schema:
          format: int32
          type: integer
      - description: Query by keyword
        in: query
        name: q
        schema:
          type: string
      - description: Repository name
        in: query
        name: repository
        schema:
          type: string
      - description: Query by format
        in: query
        name: format
        schema:
          type: string
      - description: Component group
        in: query
        name: group
        schema:
          type: string
      - description: Component name
        in: query
        name: name
        schema:
          type: string
      - description: Component version
        in: query
        name: version
        schema:
          type: string
      - description: Prerelease version flag
        in: query
        name: prerelease
        schema:
          type: string
      - description: Specific MD5 hash of component's asset
        in: query
        name: md5
        schema:
          type: string
      - description: Specific SHA-1 hash of component's asset
        in: query
        name: sha1
        schema:
          type: string
      - description: Specific SHA-256 hash of component's asset
        in: query
        name: sha256
        schema:
          type: string
      - description: Specific SHA-512 hash of component's asset
        in: query
        name: sha512
        schema:
          type: string
      - description: Conan base version
        in: query
        name: conan.baseVersion
        schema:
          type: string
      - description: Conan channel
        in: query
        name: conan.channel
        schema:
          type: string
      - description: Conan recipe revision
        in: query
        name: conan.revision
        schema:
          type: string
      - description: Conan package id
        in: query
        name: conan.packageId
        schema:
          type: string
      - description: Conan package revision
        in: query
        name: conan.packageRevision
        schema:
          type: string
      - description: Docker image name
        in: query
        name: docker.imageName
        schema:
          type: string
      - description: Docker image tag
        in: query
        name: docker.imageTag
        schema:
          type: string
      - description: Docker layer ID
        in: query
        name: docker.layerId
        schema:
          type: string
      - description: Docker content digest
        in: query
        name: docker.contentDigest
        schema:
          type: string
      - description: Maven groupId
        in: query
        name: maven.groupId
        schema:
          type: string
      - description: Maven artifactId
        in: query
        name: maven.artifactId
        schema:
          type: string
      - description: Maven base version
        in: query
        name: maven.baseVersion
        schema:
          type: string
      - description: Maven extension of component's asset
        in: query
        name: maven.extension
        schema:
          type: string
      - description: Maven classifier of component's asset
        in: query
        name: maven.classifier
        schema:
          type: string
      - description: Group asset version extension classifier
        in: query
        name: gavec
        schema:
          type: string
      - description: npm scope
        in: query
        name: npm.scope
        schema:
          type: string
      - description: npm author
        in: query
        name: npm.author
        schema:
          type: string
      - description: npm description
        in: query
        name: npm.description
        schema:
          type: string
      - description: npm keywords
        in: query
        name: npm.keywords
        schema:
          type: string
      - description: npm license
        in: query
        name: npm.license
        schema:
          type: string
      - description: npm tagged is
        in: query
        name: npm.tagged_is
        schema:
          type: string
      - description: npm tagged not
        in: query
        name: npm.tagged_not
        schema:
          type: string
      - description: NuGet id
        in: query
        name: nuget.id
        schema:
          type: string
      - description: NuGet tags
        in: query
        name: nuget.tags
        schema:
          type: string
      - description: NuGet title
        in: query
        name: nuget.title
        schema:
          type: string
      - description: NuGet authors
        in: query
        name: nuget.authors
        schema:
          type: string
      - description: NuGet description
        in: query
        name: nuget.description
        schema:
          type: string
      - description: NuGet summary
        in: query
        name: nuget.summary
        schema:
          type: string
      - description: p2 plugin name
        in: query
        name: p2.pluginName
        schema:
          type: string
      - description: PyPI classifiers
        in: query
        name: pypi.classifiers
        schema:
          type: string
      - description: PyPI description
        in: query
        name: pypi.description
        schema:
          type: string
      - description: PyPI keywords
        in: query
        name: pypi.keywords
        schema:
          type: string
      - description: PyPI summary
        in: query
        name: pypi.summary
        schema:
          type: string
      - description: RubyGems description
        in: query
        name: rubygems.description
        schema:
          type: string
      - description: RubyGems platform
        in: query
        name: rubygems.platform
        schema:
          type: string
      - description: RubyGems summary
        in: query
        name: rubygems.summary
        schema:
          type: string
      - description: Component tag
        in: query
        name: tag
        schema:
          type: string
      - description: Yum architecture
        in: query
        name: yum.architecture
        schema:
          type: string
      - description: Yum package name
        in: query
        name: yum.name
        schema:
          type: string
      responses:
        '400':
          content: {}
          description: ValidationErrorXO{id='*', message='Search returned multiple
            assets, please refine search criteria to find a single asset or use the
            sort query parameter to retrieve the first result.'}
        '404':
          content: {}
          description: Asset search returned no results
      summary: Search and download asset
      tags:
      - Search
  /v1/security/anonymous:
    get:
      operationId: read
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnonymousAccessSettingsXO'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to update settings
      summary: Get Anonymous Access settings
      tags:
      - 'Security Management: Anonymous Access'
    put:
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnonymousAccessSettingsXO'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnonymousAccessSettingsXO'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to update settings
      summary: Update Anonymous Access settings
      tags:
      - 'Security Management: Anonymous Access'
      x-codegen-request-body-name: body
  /v1/security/atlassian-crowd:
    get:
      operationId: readSettings
      responses:
        '200':
          content: {}
          description: Atlassian Crowd settings returned
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Retrieve Atlassian Crowd settings configured in Nexus Repository Manager
      tags:
      - 'Security: Atlassian Crowd'
    put:
      operationId: updateSettings
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CrowdApiXO'
        required: false
      responses:
        '200':
          content: {}
          description: Atlassian Crowd settings updated
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Update Atlassian Crowd settings configured in Nexus Repository Manager
      tags:
      - 'Security: Atlassian Crowd'
      x-codegen-request-body-name: body
  /v1/security/atlassian-crowd/clear-cache:
    post:
      operationId: clearCache
      responses:
        '204':
          content: {}
          description: Atlassian Crowd cache has been cleared
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Clear Atlassian Crowd cache
      tags:
      - 'Security: Atlassian Crowd'
  /v1/security/atlassian-crowd/verify-connection:
    post:
      operationId: verifyConnection_1
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CrowdApiXO'
        required: false
      responses:
        '204':
          content: {}
          description: Atlassian Crowd connection was successful
        '400':
          content: {}
          description: Atlassian Crowd connection failed
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Verify connection using supplied Atlassian Crowd settings
      tags:
      - 'Security: Atlassian Crowd'
      x-codegen-request-body-name: body
  /v1/security/content-selectors:
    get:
      operationId: getContentSelectors
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ContentSelectorApiResponse'
                type: array
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to read content selectors
      summary: List content selectors
      tags:
      - Content selectors
    post:
      operationId: createContentSelector
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentSelectorApiCreateRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Content selector successfully created
        '400':
          content: {}
          description: Invalid request
        '403':
          content: {}
          description: Insufficient permissions to create content selectors
      summary: Create a new content selector
      tags:
      - Content selectors
      x-codegen-request-body-name: body
  /v1/security/content-selectors/{name}:
    delete:
      operationId: deleteContentSelector
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Content selector deleted successfully
        '400':
          content: {}
          description: Invalid request
        '403':
          content: {}
          description: Insufficient permissions to delete the content selector
      summary: Delete a content selector
      tags:
      - Content selectors
    get:
      operationId: getContentSelector
      parameters:
      - description: The content selector name
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentSelectorApiResponse'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to read the content selector
      summary: Get a content selector by name
      tags:
      - Content selectors
    put:
      operationId: updateContentSelector
      parameters:
      - description: The content selector name
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentSelectorApiUpdateRequest'
        required: false
      responses:
        '204':
          content: {}
          description: Content selector updated successfully
        '400':
          content: {}
          description: Invalid request
        '403':
          content: {}
          description: Insufficient permissions to update the content selector
      summary: Update a content selector
      tags:
      - Content selectors
      x-codegen-request-body-name: body
  /v1/security/ldap:
    get:
      operationId: getLdapServers
      responses:
        '200':
          content: {}
          description: LDAP server list returned
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: List LDAP servers
      tags:
      - 'Security management: LDAP'
    post:
      operationId: createLdapServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLdapServerXo'
        required: false
      responses:
        '201':
          content: {}
          description: LDAP server created
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Create LDAP server
      tags:
      - 'Security management: LDAP'
      x-codegen-request-body-name: body
  /v1/security/ldap/change-order:
    post:
      operationId: changeOrder
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: Ordered list of LDAP server names
        required: false
      responses:
        '204':
          content: {}
          description: LDAP server order changed
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Change LDAP server order
      tags:
      - 'Security management: LDAP'
      x-codegen-request-body-name: body
  /v1/security/ldap/{name}:
    delete:
      operationId: deleteLdapServer
      parameters:
      - description: Name of the LDAP server to delete
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: LDAP server deleted
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: LDAP server not found
      summary: Delete LDAP server
      tags:
      - 'Security management: LDAP'
    get:
      operationId: getLdapServer
      parameters:
      - description: Name of the LDAP server to retrieve
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: LDAP server returned
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: LDAP server not found
      summary: Get LDAP server
      tags:
      - 'Security management: LDAP'
    put:
      operationId: updateLdapServer
      parameters:
      - description: Name of the LDAP server to update
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLdapServerXo'
        description: Updated values of LDAP server
        required: false
      responses:
        '204':
          content: {}
          description: LDAP server updated
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: LDAP server not found
      summary: Update LDAP server
      tags:
      - 'Security management: LDAP'
      x-codegen-request-body-name: body
  /v1/security/privileges:
    get:
      operationId: getPrivileges
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiPrivilege'
                type: array
          description: successful operation
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Retrieve a list of privileges.
      tags:
      - 'Security management: privileges'
  /v1/security/privileges/application:
    post:
      operationId: createPrivilege_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeApplicationRequest'
        description: The privilege to create.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Create an application type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/application/{privilegeName}:
    put:
      operationId: updatePrivilege_1
      parameters:
      - description: The name of the privilege to update.
        in: path
        name: privilegeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeApplicationRequest'
        description: The privilege to update.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: Privilege not found in the system.
      summary: Update an application type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-admin:
    post:
      operationId: createPrivilege_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryAdminRequest'
        description: The privilege to create.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Create a repository admin type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-admin/{privilegeName}:
    put:
      operationId: updatePrivilege_4
      parameters:
      - description: The name of the privilege to update.
        in: path
        name: privilegeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryAdminRequest'
        description: The privilege to update.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: Privilege not found in the system.
      summary: Update a repository admin type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-content-selector:
    post:
      operationId: createPrivilege_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryContentSelectorRequest'
        description: The privilege to create.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Create a repository content selector type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-content-selector/{privilegeName}:
    put:
      operationId: updatePrivilege_3
      parameters:
      - description: The name of the privilege to update.
        in: path
        name: privilegeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryContentSelectorRequest'
        description: The privilege to update.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: Privilege not found in the system.
      summary: Update a repository content selector type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-view:
    post:
      operationId: createPrivilege_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryViewRequest'
        description: The privilege to create.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Create a repository view type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/repository-view/{privilegeName}:
    put:
      operationId: updatePrivilege_2
      parameters:
      - description: The name of the privilege to update.
        in: path
        name: privilegeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeRepositoryViewRequest'
        description: The privilege to update.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: Privilege not found in the system.
      summary: Update a repository view type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/script:
    post:
      operationId: createPrivilege_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeScriptRequest'
        description: The privilege to create.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Create a script type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/script/{privilegeName}:
    put:
      operationId: updatePrivilege_5
      parameters:
      - description: The name of the privilege to update.
        in: path
        name: privilegeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeScriptRequest'
        description: The privilege to update.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: Privilege not found in the system.
      summary: Update a script type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/wildcard:
    post:
      operationId: createPrivilege
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeWildcardRequest'
        description: The privilege to create.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Create a wildcard type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/wildcard/{privilegeName}:
    put:
      operationId: updatePrivilege
      parameters:
      - description: The name of the privilege to update.
        in: path
        name: privilegeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPrivilegeWildcardRequest'
        description: The privilege to update.
        required: false
      responses:
        '400':
          content: {}
          description: Privilege object not configured properly.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: Privilege not found in the system.
      summary: Update a wildcard type privilege.
      tags:
      - 'Security management: privileges'
      x-codegen-request-body-name: body
  /v1/security/privileges/{privilegeName}:
    delete:
      operationId: deletePrivilege
      parameters:
      - description: The name of the privilege to delete.
        in: path
        name: privilegeName
        required: true
        schema:
          type: string
      responses:
        '400':
          content: {}
          description: The privilege is internal and may not be altered.
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: Privilege not found in the system.
      summary: Delete a privilege by name.
      tags:
      - 'Security management: privileges'
    get:
      operationId: getPrivilege
      parameters:
      - description: The name of the privilege to retrieve.
        in: path
        name: privilegeName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPrivilege'
          description: successful operation
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: Privilege not found in the system.
      summary: Retrieve a privilege by name.
      tags:
      - 'Security management: privileges'
  /v1/security/realms/active:
    get:
      operationId: getActiveRealms
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      summary: List the active realm IDs in order
      tags:
      - 'Security management: realms'
    put:
      operationId: setActiveRealms
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: The realm IDs
        required: false
      responses:
        default:
          content: {}
          description: successful operation
      summary: Set the active security realms in the order they should be used
      tags:
      - 'Security management: realms'
      x-codegen-request-body-name: body
  /v1/security/realms/available:
    get:
      operationId: getRealms
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RealmApiXO'
                type: array
          description: successful operation
      summary: List the available realms
      tags:
      - 'Security management: realms'
  /v1/security/roles:
    get:
      operationId: getRoles
      parameters:
      - description: The id of the user source to filter the roles by, if supplied.
          Otherwise roles from all user sources will be returned.
        in: query
        name: source
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleXOResponse'
                type: array
          description: successful operation
        '400':
          content: {}
          description: The specified source does not exist
        '403':
          content: {}
          description: Insufficient permissions to read roles
      summary: List roles
      tags:
      - 'Security management: roles'
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleXORequest'
        description: A role configuration
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleXOResponse'
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to create role
      summary: Create role
      tags:
      - 'Security management: roles'
      x-codegen-request-body-name: body
  /v1/security/roles/{id}:
    delete:
      operationId: delete
      parameters:
      - description: The id of the role to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '403':
          content: {}
          description: Insufficient permissions to delete role
        '404':
          content: {}
          description: Role not found
      summary: Delete role
      tags:
      - 'Security management: roles'
    get:
      operationId: getRole
      parameters:
      - description: The id of the user source to filter the roles by. Available sources
          can be fetched using the 'User Sources' endpoint.
        in: query
        name: source
        schema:
          default: default
          type: string
      - description: The id of the role to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleXOResponse'
          description: successful operation
        '400':
          content: {}
          description: The specified source does not exist
        '403':
          content: {}
          description: Insufficient permissions to read roles
        '404':
          content: {}
          description: Role not found
      summary: Get role
      tags:
      - 'Security management: roles'
    put:
      operationId: update_1
      parameters:
      - description: The id of the role to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleXORequest'
        description: A role configuration
        required: true
      responses:
        '403':
          content: {}
          description: Insufficient permissions to update role
        '404':
          content: {}
          description: Role not found
      summary: Update role
      tags:
      - 'Security management: roles'
      x-codegen-request-body-name: body
  /v1/security/saml:
    delete:
      operationId: deleteSamlConfiguration
      responses:
        '204':
          content: {}
          description: SAML configuration deleted
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
      summary: Delete SAML configuration
      tags:
      - 'Security management: SAML'
    get:
      operationId: getSamlConfiguration
      responses:
        '200':
          content: {}
          description: SAML configuration returned
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: SAML configuration not found
      summary: Get SAML configuration
      tags:
      - 'Security management: SAML'
    put:
      operationId: putSamlConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SamlConfigurationXO'
        required: false
      responses:
        '201':
          content: {}
          description: SAML configuration created
        '204':
          content: {}
          description: SAML configuration updated
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: SAML configuration not found
      summary: Create or update SAML configuration
      tags:
      - 'Security management: SAML'
      x-codegen-request-body-name: body
  /v1/security/saml/metadata:
    get:
      operationId: getMetadata
      responses:
        '200':
          content: {}
          description: Metadata Returned
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: Metadata not found
      summary: Get service provider metadata XML document
      tags:
      - 'Security management: SAML'
  /v1/security/saml/pem:
    get:
      operationId: getPublicCertificateInPemFormat
      responses:
        '200':
          content: {}
          description: PEM file Returned
        '401':
          content: {}
          description: Authentication required
        '403':
          content: {}
          description: Insufficient permissions
        '404':
          content: {}
          description: PEM file not found
      summary: Get service provider signing certificate in PEM format
      tags:
      - 'Security management: SAML'
  /v1/security/ssl:
    get:
      operationId: retrieveCertificate
      parameters:
      - description: The remote system's host name
        in: query
        name: host
        required: true
        schema:
          type: string
      - description: The port on the remote system to connect to
        in: query
        name: port
        schema:
          default: 443
          format: int32
          type: integer
      - description: An optional hint of the protocol to try for the connection
        in: query
        name: protocolHint
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCertificate'
          description: successful operation
        '400':
          content: {}
          description: A certificate could not be retrieved, see the message for details.
        '403':
          content: {}
          description: Insufficient permissions to retrieve remote certificate.
      summary: Helper method to retrieve certificate details from a remote system.
      tags:
      - 'Security: certificates'
  /v1/security/ssl/truststore:
    get:
      operationId: getTrustStoreCertificates
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiCertificate'
                type: array
          description: successful operation
        '403':
          content: {}
          description: Insufficient permissions to list certificates in the trust
            store.
      summary: Retrieve a list of certificates added to the trust store.
      tags:
      - 'Security: certificates'
    post:
      operationId: addCertificate
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        description: The certificate to add encoded in PEM format
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCertificate'
          description: The certificate was successfully added.
        '403':
          content: {}
          description: Insufficient permissions to add certificate to the trust store.
        '409':
          content: {}
          description: The certificate already exists in the system.
      summary: Add a certificate to the trust store.
      tags:
      - 'Security: certificates'
      x-codegen-request-body-name: body
  /v1/security/ssl/truststore/{id}:
    delete:
      operationId: removeCertificate
      parameters:
      - description: The id of the certificate that should be removed.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '403':
          content: {}
          description: Insufficient permissions to remove certificate from the trust
            store
      summary: Remove a certificate in the trust store.
      tags:
      - 'Security: certificates'
  /v1/security/user-sources:
    get:
      operationId: getUserSources
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiUserSource'
                type: array
          description: successful operation
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Retrieve a list of the available user sources.
      tags:
      - Security management
  /v1/security/user-tokens:
    delete:
      operationId: resetAllUserTokens
      responses:
        default:
          content: {}
          description: successful operation
      summary: Invalidate all existing user tokens.
      tags:
      - 'Security management: user tokens'
    get:
      operationId: serviceStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokensApiModel'
          description: successful operation
      summary: Show if the user token capability is enabled or not
      tags:
      - 'Security management: user tokens'
    put:
      operationId: setServiceStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTokensApiModel'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokensApiModel'
          description: successful operation
      summary: Enable/Disable the user token capability
      tags:
      - 'Security management: user tokens'
      x-codegen-request-body-name: body
  /v1/security/users:
    get:
      operationId: getUsers
      parameters:
      - description: An optional term to search userids for.
        in: query
        name: userId
        schema:
          type: string
      - description: An optional user source to restrict the search to.
        in: query
        name: source
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiUser'
                type: array
          description: successful operation
        '400':
          content: {}
          description: Password was not supplied in the body of the request
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Retrieve a list of users. Note if the source is not 'default' the response
        is limited to 100 users.
      tags:
      - 'Security management: users'
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCreateUser'
        description: A representation of the user to create.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
          description: successful operation
        '400':
          content: {}
          description: Password was not supplied in the body of the request
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
      summary: Create a new user in the default source.
      tags:
      - 'Security management: users'
      x-codegen-request-body-name: body
  /v1/security/users/{userId}:
    delete:
      operationId: deleteUser
      parameters:
      - description: The userid the request should apply to.
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        '400':
          content: {}
          description: There was problem deleting a user. Consult the response body
            for more details
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: User or user source not found in the system.
      summary: Delete a user.
      tags:
      - 'Security management: users'
    put:
      operationId: updateUser
      parameters:
      - description: The userid the request should apply to.
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        description: A representation of the user to update.
        required: false
      responses:
        '400':
          content: {}
          description: Password was not supplied in the body of the request
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: User or user source not found in the system.
      summary: Update an existing user.
      tags:
      - 'Security management: users'
      x-codegen-request-body-name: body
  /v1/security/users/{userId}/change-password:
    put:
      operationId: changePassword
      parameters:
      - description: The userid the request should apply to.
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: The new password to use.
        required: false
      responses:
        '400':
          content: {}
          description: Password was not supplied in the body of the request
        '403':
          content: {}
          description: The user does not have permission to perform the operation.
        '404':
          content: {}
          description: User not found in the system.
      summary: Change a user's password.
      tags:
      - 'Security management: users'
      x-codegen-request-body-name: body
  /v1/security/users/{userId}/{realm}/user-token-reset:
    delete:
      description: Resetting the user token will invalidate the current token and
        force a new token to be created the next time it is accessed.
      operationId: reset
      parameters:
      - description: The userId of the user to reset the token for
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: The realm of the user to reset the token for
        in: path
        name: realm
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: User token successfully reset
        '400':
          content: {}
          description: User tokens are not enabled
        '403':
          content: {}
          description: Insufficient permissions to reset user token
        '404':
          content: {}
          description: User not found
        '422':
          content: {}
          description: Invalid realm
      summary: Reset the user token for the given user.
      tags:
      - 'Security management: users'
  /v1/staging/delete:
    post:
      operationId: delete_3
      parameters:
      - description: Query by keyword
        in: query
        name: q
        schema:
          type: string
      - description: Repository name
        in: query
        name: repository
        schema:
          type: string
      - description: Query by format
        in: query
        name: format
        schema:
          type: string
      - description: Component group
        in: query
        name: group
        schema:
          type: string
      - description: Component name
        in: query
        name: name
        schema:
          type: string
      - description: Component version
        in: query
        name: version
        schema:
          type: string
      - description: Prerelease version flag
        in: query
        name: prerelease
        schema:
          type: string
      - description: Specific MD5 hash of component's asset
        in: query
        name: md5
        schema:
          type: string
      - description: Specific SHA-1 hash of component's asset
        in: query
        name: sha1
        schema:
          type: string
      - description: Specific SHA-256 hash of component's asset
        in: query
        name: sha256
        schema:
          type: string
      - description: Specific SHA-512 hash of component's asset
        in: query
        name: sha512
        schema:
          type: string
      - description: Conan base version
        in: query
        name: conan.baseVersion
        schema:
          type: string
      - description: Conan channel
        in: query
        name: conan.channel
        schema:
          type: string
      - description: Conan recipe revision
        in: query
        name: conan.revision
        schema:
          type: string
      - description: Conan package id
        in: query
        name: conan.packageId
        schema:
          type: string
      - description: Conan package revision
        in: query
        name: conan.packageRevision
        schema:
          type: string
      - description: Docker image name
        in: query
        name: docker.imageName
        schema:
          type: string
      - description: Docker image tag
        in: query
        name: docker.imageTag
        schema:
          type: string
      - description: Docker layer ID
        in: query
        name: docker.layerId
        schema:
          type: string
      - description: Docker content digest
        in: query
        name: docker.contentDigest
        schema:
          type: string
      - description: Maven groupId
        in: query
        name: maven.groupId
        schema:
          type: string
      - description: Maven artifactId
        in: query
        name: maven.artifactId
        schema:
          type: string
      - description: Maven base version
        in: query
        name: maven.baseVersion
        schema:
          type: string
      - description: Maven extension of component's asset
        in: query
        name: maven.extension
        schema:
          type: string
      - description: Maven classifier of component's asset
        in: query
        name: maven.classifier
        schema:
          type: string
      - description: Group asset version extension classifier
        in: query
        name: gavec
        schema:
          type: string
      - description: npm scope
        in: query
        name: npm.scope
        schema:
          type: string
      - description: npm author
        in: query
        name: npm.author
        schema:
          type: string
      - description: npm description
        in: query
        name: npm.description
        schema:
          type: string
      - description: npm keywords
        in: query
        name: npm.keywords
        schema:
          type: string
      - description: npm license
        in: query
        name: npm.license
        schema:
          type: string
      - description: npm tagged is
        in: query
        name: npm.tagged_is
        schema:
          type: string
      - description: npm tagged not
        in: query
        name: npm.tagged_not
        schema:
          type: string
      - description: NuGet id
        in: query
        name: nuget.id
        schema:
          type: string
      - description: NuGet tags
        in: query
        name: nuget.tags
        schema:
          type: string
      - description: NuGet title
        in: query
        name: nuget.title
        schema:
          type: string
      - description: NuGet authors
        in: query
        name: nuget.authors
        schema:
          type: string
      - description: NuGet description
        in: query
        name: nuget.description
        schema:
          type: string
      - description: NuGet summary
        in: query
        name: nuget.summary
        schema:
          type: string
      - description: p2 plugin name
        in: query
        name: p2.pluginName
        schema:
          type: string
      - description: PyPI classifiers
        in: query
        name: pypi.classifiers
        schema:
          type: string
      - description: PyPI description
        in: query
        name: pypi.description
        schema:
          type: string
      - description: PyPI keywords
        in: query
        name: pypi.keywords
        schema:
          type: string
      - description: PyPI summary
        in: query
        name: pypi.summary
        schema:
          type: string
      - description: RubyGems description
        in: query
        name: rubygems.description
        schema:
          type: string
      - description: RubyGems platform
        in: query
        name: rubygems.platform
        schema:
          type: string
      - description: RubyGems summary
        in: query
        name: rubygems.summary
        schema:
          type: string
      - description: Component tag
        in: query
        name: tag
        schema:
          type: string
      - description: Yum architecture
        in: query
        name: yum.architecture
        schema:
          type: string
      - description: Yum package name
        in: query
        name: yum.name
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: Delete Successful
        '400':
          content: {}
          description: Invalid client request
        '401':
          content: {}
          description: Unauthorized
        '403':
          content: {}
          description: Forbidden
        '404':
          content: {}
          description: No components found
      summary: Delete components
      tags:
      - Staging
  /v1/staging/move/{destination}:
    post:
      operationId: move
      parameters:
      - in: path
        name: destination
        required: true
        schema:
          type: string
      - description: Query by keyword
        in: query
        name: q
        schema:
          type: string
      - description: Repository name
        in: query
        name: repository
        schema:
          type: string
      - description: Query by format
        in: query
        name: format
        schema:
          type: string
      - description: Component group
        in: query
        name: group
        schema:
          type: string
      - description: Component name
        in: query
        name: name
        schema:
          type: string
      - description: Component version
        in: query
        name: version
        schema:
          type: string
      - description: Prerelease version flag
        in: query
        name: prerelease
        schema:
          type: string
      - description: Specific MD5 hash of component's asset
        in: query
        name: md5
        schema:
          type: string
      - description: Specific SHA-1 hash of component's asset
        in: query
        name: sha1
        schema:
          type: string
      - description: Specific SHA-256 hash of component's asset
        in: query
        name: sha256
        schema:
          type: string
      - description: Specific SHA-512 hash of component's asset
        in: query
        name: sha512
        schema:
          type: string
      - description: Conan base version
        in: query
        name: conan.baseVersion
        schema:
          type: string
      - description: Conan channel
        in: query
        name: conan.channel
        schema:
          type: string
      - description: Conan recipe revision
        in: query
        name: conan.revision
        schema:
          type: string
      - description: Conan package id
        in: query
        name: conan.packageId
        schema:
          type: string
      - description: Conan package revision
        in: query
        name: conan.packageRevision
        schema:
          type: string
      - description: Docker image name
        in: query
        name: docker.imageName
        schema:
          type: string
      - description: Docker image tag
        in: query
        name: docker.imageTag
        schema:
          type: string
      - description: Docker layer ID
        in: query
        name: docker.layerId
        schema:
          type: string
      - description: Docker content digest
        in: query
        name: docker.contentDigest
        schema:
          type: string
      - description: Maven groupId
        in: query
        name: maven.groupId
        schema:
          type: string
      - description: Maven artifactId
        in: query
        name: maven.artifactId
        schema:
          type: string
      - description: Maven base version
        in: query
        name: maven.baseVersion
        schema:
          type: string
      - description: Maven extension of component's asset
        in: query
        name: maven.extension
        schema:
          type: string
      - description: Maven classifier of component's asset
        in: query
        name: maven.classifier
        schema:
          type: string
      - description: Group asset version extension classifier
        in: query
        name: gavec
        schema:
          type: string
      - description: npm scope
        in: query
        name: npm.scope
        schema:
          type: string
      - description: npm author
        in: query
        name: npm.author
        schema:
          type: string
      - description: npm description
        in: query
        name: npm.description
        schema:
          type: string
      - description: npm keywords
        in: query
        name: npm.keywords
        schema:
          type: string
      - description: npm license
        in: query
        name: npm.license
        schema:
          type: string
      - description: npm tagged is
        in: query
        name: npm.tagged_is
        schema:
          type: string
      - description: npm tagged not
        in: query
        name: npm.tagged_not
        schema:
          type: string
      - description: NuGet id
        in: query
        name: nuget.id
        schema:
          type: string
      - description: NuGet tags
        in: query
        name: nuget.tags
        schema:
          type: string
      - description: NuGet title
        in: query
        name: nuget.title
        schema:
          type: string
      - description: NuGet authors
        in: query
        name: nuget.authors
        schema:
          type: string
      - description: NuGet description
        in: query
        name: nuget.description
        schema:
          type: string
      - description: NuGet summary
        in: query
        name: nuget.summary
        schema:
          type: string
      - description: p2 plugin name
        in: query
        name: p2.pluginName
        schema:
          type: string
      - description: PyPI classifiers
        in: query
        name: pypi.classifiers
        schema:
          type: string
      - description: PyPI description
        in: query
        name: pypi.description
        schema:
          type: string
      - description: PyPI keywords
        in: query
        name: pypi.keywords
        schema:
          type: string
      - description: PyPI summary
        in: query
        name: pypi.summary
        schema:
          type: string
      - description: RubyGems description
        in: query
        name: rubygems.description
        schema:
          type: string
      - description: RubyGems platform
        in: query
        name: rubygems.platform
        schema:
          type: string
      - description: RubyGems summary
        in: query
        name: rubygems.summary
        schema:
          type: string
      - description: Component tag
        in: query
        name: tag
        schema:
          type: string
      - description: Yum architecture
        in: query
        name: yum.architecture
        schema:
          type: string
      - description: Yum package name
        in: query
        name: yum.name
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: Move Successful
        '400':
          content: {}
          description: Invalid client request
        '401':
          content: {}
          description: Unauthorized
        '403':
          content: {}
          description: Authentication required
        '404':
          content: {}
          description: No components found
      summary: Move components
      tags:
      - Staging
  /v1/status:
    get:
      operationId: isAvailable
      responses:
        '200':
          content: {}
          description: Available to service requests
        '503':
          content: {}
          description: Unavailable to service requests
      summary: Health check endpoint that validates server can respond to read requests
      tags:
      - Status
  /v1/status/check:
    get:
      operationId: getSystemStatusChecks
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/Result'
                type: object
          description: The system status check results
      summary: Health check endpoint that returns the results of the system status
        checks
      tags:
      - Status
  /v1/status/writable:
    get:
      operationId: isWritable
      responses:
        '200':
          content: {}
          description: Available to service requests
        '503':
          content: {}
          description: Unavailable to service requests
      summary: Health check endpoint that validates server can respond to read and
        write requests
      tags:
      - Status
  /v1/support/supportzip:
    post:
      operationId: supportzip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportZipGeneratorRequest'
        required: false
      responses:
        default:
          content: {}
          description: successful operation
      summary: Creates and downloads a support zip
      tags:
      - Support
      x-codegen-request-body-name: body
  /v1/support/supportzippath:
    post:
      operationId: supportzippath
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportZipGeneratorRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportZipXO'
          description: successful operation
      summary: Creates a support zip and returns the path
      tags:
      - Support
      x-codegen-request-body-name: body
  /v1/system/license:
    delete:
      operationId: removeLicense
      responses:
        default:
          content: {}
          description: successful operation
      summary: Uninstall license if present.
      tags:
      - Product licensing
    get:
      operationId: getLicenseStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseDetailsXO'
          description: successful operation
      summary: Get the current license status.
      tags:
      - Product licensing
    post:
      description: Server must be restarted to take effect
      operationId: setLicense
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/InputStream'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseDetailsXO'
          description: successful operation
      summary: Upload a new license file.
      tags:
      - Product licensing
      x-codegen-request-body-name: body
  /v1/tags:
    get:
      operationId: getTags
      parameters:
      - description: A token returned by a prior request. If present, the next page
          of results are returned
        in: query
        name: continuationToken
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTagXO'
          description: successful operation
      summary: List tags
      tags:
      - Tags
    post:
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagXO'
        required: false
      responses:
        '200':
          content: {}
          description: Tag was added
        '400':
          content: {}
          description: Bad request. Check tag name and attributes. Name can only contain
            letters, numbers, underscores, hyphens and dots and cannot start with
            an underscore or dot. The name cannot exceed 256 characters. The attributes
            is a JSON document which cannot exceed 20k.
      summary: Create a tag
      tags:
      - Tags
      x-codegen-request-body-name: body
  /v1/tags/associate/{tagName}:
    delete:
      operationId: disassociate
      parameters:
      - description: Tag to associate to the matched components
        in: path
        name: tagName
        required: true
        schema:
          type: string
      - description: Query by keyword
        in: query
        name: q
        schema:
          type: string
      - description: Repository name
        in: query
        name: repository
        schema:
          type: string
      - description: Query by format
        in: query
        name: format
        schema:
          type: string
      - description: Component group
        in: query
        name: group
        schema:
          type: string
      - description: Component name
        in: query
        name: name
        schema:
          type: string
      - description: Component version
        in: query
        name: version
        schema:
          type: string
      - description: Prerelease version flag
        in: query
        name: prerelease
        schema:
          type: string
      - description: Specific MD5 hash of component's asset
        in: query
        name: md5
        schema:
          type: string
      - description: Specific SHA-1 hash of component's asset
        in: query
        name: sha1
        schema:
          type: string
      - description: Specific SHA-256 hash of component's asset
        in: query
        name: sha256
        schema:
          type: string
      - description: Specific SHA-512 hash of component's asset
        in: query
        name: sha512
        schema:
          type: string
      - description: Conan base version
        in: query
        name: conan.baseVersion
        schema:
          type: string
      - description: Conan channel
        in: query
        name: conan.channel
        schema:
          type: string
      - description: Conan recipe revision
        in: query
        name: conan.revision
        schema:
          type: string
      - description: Conan package id
        in: query
        name: conan.packageId
        schema:
          type: string
      - description: Conan package revision
        in: query
        name: conan.packageRevision
        schema:
          type: string
      - description: Docker image name
        in: query
        name: docker.imageName
        schema:
          type: string
      - description: Docker image tag
        in: query
        name: docker.imageTag
        schema:
          type: string
      - description: Docker layer ID
        in: query
        name: docker.layerId
        schema:
          type: string
      - description: Docker content digest
        in: query
        name: docker.contentDigest
        schema:
          type: string
      - description: Maven groupId
        in: query
        name: maven.groupId
        schema:
          type: string
      - description: Maven artifactId
        in: query
        name: maven.artifactId
        schema:
          type: string
      - description: Maven base version
        in: query
        name: maven.baseVersion
        schema:
          type: string
      - description: Maven extension of component's asset
        in: query
        name: maven.extension
        schema:
          type: string
      - description: Maven classifier of component's asset
        in: query
        name: maven.classifier
        schema:
          type: string
      - description: Group asset version extension classifier
        in: query
        name: gavec
        schema:
          type: string
      - description: npm scope
        in: query
        name: npm.scope
        schema:
          type: string
      - description: npm author
        in: query
        name: npm.author
        schema:
          type: string
      - description: npm description
        in: query
        name: npm.description
        schema:
          type: string
      - description: npm keywords
        in: query
        name: npm.keywords
        schema:
          type: string
      - description: npm license
        in: query
        name: npm.license
        schema:
          type: string
      - description: npm tagged is
        in: query
        name: npm.tagged_is
        schema:
          type: string
      - description: npm tagged not
        in: query
        name: npm.tagged_not
        schema:
          type: string
      - description: NuGet id
        in: query
        name: nuget.id
        schema:
          type: string
      - description: NuGet tags
        in: query
        name: nuget.tags
        schema:
          type: string
      - description: NuGet title
        in: query
        name: nuget.title
        schema:
          type: string
      - description: NuGet authors
        in: query
        name: nuget.authors
        schema:
          type: string
      - description: NuGet description
        in: query
        name: nuget.description
        schema:
          type: string
      - description: NuGet summary
        in: query
        name: nuget.summary
        schema:
          type: string
      - description: p2 plugin name
        in: query
        name: p2.pluginName
        schema:
          type: string
      - description: PyPI classifiers
        in: query
        name: pypi.classifiers
        schema:
          type: string
      - description: PyPI description
        in: query
        name: pypi.description
        schema:
          type: string
      - description: PyPI keywords
        in: query
        name: pypi.keywords
        schema:
          type: string
      - description: PyPI summary
        in: query
        name: pypi.summary
        schema:
          type: string
      - description: RubyGems description
        in: query
        name: rubygems.description
        schema:
          type: string
      - description: RubyGems platform
        in: query
        name: rubygems.platform
        schema:
          type: string
      - description: RubyGems summary
        in: query
        name: rubygems.summary
        schema:
          type: string
      - description: Component tag
        in: query
        name: tag
        schema:
          type: string
      - description: Yum architecture
        in: query
        name: yum.architecture
        schema:
          type: string
      - description: Yum package name
        in: query
        name: yum.name
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: Disassociation was successful
        '404':
          content: {}
          description: Tag or components not found
      summary: Disassociate components from a tag
      tags:
      - Tags
    post:
      operationId: associate
      parameters:
      - description: Tag to associate to the matched components
        in: path
        name: tagName
        required: true
        schema:
          type: string
      - description: The query waits until the indexing is complete
        in: query
        name: wait
        schema:
          default: true
          type: boolean
      - description: Query by keyword
        in: query
        name: q
        schema:
          type: string
      - description: Repository name
        in: query
        name: repository
        schema:
          type: string
      - description: Query by format
        in: query
        name: format
        schema:
          type: string
      - description: Component group
        in: query
        name: group
        schema:
          type: string
      - description: Component name
        in: query
        name: name
        schema:
          type: string
      - description: Component version
        in: query
        name: version
        schema:
          type: string
      - description: Prerelease version flag
        in: query
        name: prerelease
        schema:
          type: string
      - description: Specific MD5 hash of component's asset
        in: query
        name: md5
        schema:
          type: string
      - description: Specific SHA-1 hash of component's asset
        in: query
        name: sha1
        schema:
          type: string
      - description: Specific SHA-256 hash of component's asset
        in: query
        name: sha256
        schema:
          type: string
      - description: Specific SHA-512 hash of component's asset
        in: query
        name: sha512
        schema:
          type: string
      - description: Conan base version
        in: query
        name: conan.baseVersion
        schema:
          type: string
      - description: Conan channel
        in: query
        name: conan.channel
        schema:
          type: string
      - description: Conan recipe revision
        in: query
        name: conan.revision
        schema:
          type: string
      - description: Conan package id
        in: query
        name: conan.packageId
        schema:
          type: string
      - description: Conan package revision
        in: query
        name: conan.packageRevision
        schema:
          type: string
      - description: Docker image name
        in: query
        name: docker.imageName
        schema:
          type: string
      - description: Docker image tag
        in: query
        name: docker.imageTag
        schema:
          type: string
      - description: Docker layer ID
        in: query
        name: docker.layerId
        schema:
          type: string
      - description: Docker content digest
        in: query
        name: docker.contentDigest
        schema:
          type: string
      - description: Maven groupId
        in: query
        name: maven.groupId
        schema:
          type: string
      - description: Maven artifactId
        in: query
        name: maven.artifactId
        schema:
          type: string
      - description: Maven base version
        in: query
        name: maven.baseVersion
        schema:
          type: string
      - description: Maven extension of component's asset
        in: query
        name: maven.extension
        schema:
          type: string
      - description: Maven classifier of component's asset
        in: query
        name: maven.classifier
        schema:
          type: string
      - description: Group asset version extension classifier
        in: query
        name: gavec
        schema:
          type: string
      - description: npm scope
        in: query
        name: npm.scope
        schema:
          type: string
      - description: npm author
        in: query
        name: npm.author
        schema:
          type: string
      - description: npm description
        in: query
        name: npm.description
        schema:
          type: string
      - description: npm keywords
        in: query
        name: npm.keywords
        schema:
          type: string
      - description: npm license
        in: query
        name: npm.license
        schema:
          type: string
      - description: npm tagged is
        in: query
        name: npm.tagged_is
        schema:
          type: string
      - description: npm tagged not
        in: query
        name: npm.tagged_not
        schema:
          type: string
      - description: NuGet id
        in: query
        name: nuget.id
        schema:
          type: string
      - description: NuGet tags
        in: query
        name: nuget.tags
        schema:
          type: string
      - description: NuGet title
        in: query
        name: nuget.title
        schema:
          type: string
      - description: NuGet authors
        in: query
        name: nuget.authors
        schema:
          type: string
      - description: NuGet description
        in: query
        name: nuget.description
        schema:
          type: string
      - description: NuGet summary
        in: query
        name: nuget.summary
        schema:
          type: string
      - description: p2 plugin name
        in: query
        name: p2.pluginName
        schema:
          type: string
      - description: PyPI classifiers
        in: query
        name: pypi.classifiers
        schema:
          type: string
      - description: PyPI description
        in: query
        name: pypi.description
        schema:
          type: string
      - description: PyPI keywords
        in: query
        name: pypi.keywords
        schema:
          type: string
      - description: PyPI summary
        in: query
        name: pypi.summary
        schema:
          type: string
      - description: RubyGems description
        in: query
        name: rubygems.description
        schema:
          type: string
      - description: RubyGems platform
        in: query
        name: rubygems.platform
        schema:
          type: string
      - description: RubyGems summary
        in: query
        name: rubygems.summary
        schema:
          type: string
      - description: Component tag
        in: query
        name: tag
        schema:
          type: string
      - description: Yum architecture
        in: query
        name: yum.architecture
        schema:
          type: string
      - description: Yum package name
        in: query
        name: yum.name
        schema:
          type: string
      responses:
        '200':
          content: {}
          description: Associate was successful
        '404':
          content: {}
          description: Tag or components not found
      summary: Associate components with a tag
      tags:
      - Tags
  /v1/tags/{name}:
    delete:
      operationId: delete_2
      parameters:
      - description: Name of the tag to delete
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Tag was deleted
        '404':
          content: {}
          description: Tag not found
      summary: Delete a tag
      tags:
      - Tags
    get:
      operationId: get_3
      parameters:
      - description: Name of the tag to retrieve
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagXO'
          description: successful operation
        '404':
          content: {}
          description: Tag not found
      summary: Get a tag
      tags:
      - Tags
    put:
      operationId: replace
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseTagXO'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagXO'
          description: successful operation
        '400':
          content: {}
          description: Bad request. Check tag attributes. The attributes is a JSON
            document which cannot exceed 20k
        '404':
          content: {}
          description: Tag not found
      summary: Update a tags attributes
      tags:
      - Tags
      x-codegen-request-body-name: body
  /v1/tasks:
    get:
      operationId: getTasks
      parameters:
      - description: Type of the tasks to get
        in: query
        name: type
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTaskXO'
          description: successful operation
      summary: List tasks
      tags:
      - Tasks
  /v1/tasks/{id}:
    get:
      operationId: getTaskById
      parameters:
      - description: Id of the task to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskXO'
          description: successful operation
        '404':
          content: {}
          description: Task not found
      summary: Get a single task by id
      tags:
      - Tasks
  /v1/tasks/{id}/run:
    post:
      operationId: run
      parameters:
      - description: Id of the task to run
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Task was run
        '404':
          content: {}
          description: Task not found
        '405':
          content: {}
          description: Task is disabled
      summary: Run task
      tags:
      - Tasks
  /v1/tasks/{id}/stop:
    post:
      operationId: stop
      parameters:
      - description: Id of the task to stop
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: Task was stopped
        '404':
          content: {}
          description: Task not found
        '409':
          content: {}
          description: Unable to stop task
      summary: Stop task
      tags:
      - Tasks
security:
- BasicAuth: []
servers:
- url: /service/rest/
tags:
- name: 'Security Management: Anonymous Access'
- name: Security management
- name: 'Security management: users'
- name: 'Security management: privileges'
- name: 'Security management: realms'
- name: 'Security management: roles'
- name: Tasks
- name: Blob store
- name: Lifecycle
- name: Read-only
- name: 'Security: certificates'
- name: Assets
- name: Components
- name: Repository Management
- name: Content selectors
- name: Routing rules
- name: Search
- name: Formats
- name: Email
- name: Status
- name: Support
- name: Script
- name: 'Security management: LDAP'
- name: Tags
- name: Manage Sonatype Repository Firewall configuration
- name: Product licensing
- name: 'Security: Atlassian Crowd'
- name: 'Security management: user tokens'
- name: Staging
- name: Azure blob store
- name: 'Security management: SAML'
x-original-swagger-version: '2.0'
